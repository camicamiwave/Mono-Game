'''
     ▄▄             ▄█▀▄     ▄█▄     ▄▄ ▄▄     ▄▄▄      ▄▄      ▄▀█▄             ▄▄
       ▀▄       ▄▄▄▄█████  ▄█████▄  ▀█████▀  ▄▄▀█▀▄▄  ▄████▄   █████▄▄▄▄       ▄▀
        ▀▄   ▄████▀▀██▀     ▀▀▄▀▀     ▀█▀    ▀▀▀▄▀▀▀   ▀██▀      ▀██▀▀████▄   ▄▀
         █▄ ▄████▄██▄▀█▄                                        ▄█▀▄██▄████▄ ▄█
          ▀██▀████▀ █▄▄▀█▄▄                                  ▄▄█▀▄▄█ ▀████▀██▀
     ▄████████████████████████████████████████████████████████████████████████████▄
     ███                                                                        ███
     ███   ██████   ██████  ████████████  █████████████  ████████████  ██████   ███
     ███   ███   ███   ███  ███      ███  ███       ███  ███      ███     ███   ███
     ███   ███   ███   ███  ███      ███  ███       ███  ███      ███  ███      ███
     ███   ███   ███   ███  ███      ███  ███       ███  ███      ███  ██████   ███
     ███   ███         ███  ████████████  ███       ███  ████████████           ███
     ███   ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄           ███
     ███   Alimba, Asuncion, Biñas, Dimaano, De La Fuente,                      ███
     ███   Echano, Morada, Mortiga, Yaneza                                      ███
     ███                                                                        ███
     ▀████████████████████████████████████████████████████████████████████████████▀

Note:
    Do not run this program on an IDE as the displays may be dislocated. It is preferrable
    to run it on python.exe.
'''
import random, time, os, threading
import tkinter.messagebox
try: from pynput import keyboard
except:
    if tkinter.messagebox.askyesno(title='Missing modules', message='Pynput not found. Do you want to install this module?'):
        os.system('cmd /c "pip install pynput"')
        try: from pynput import keyboard
        except:
            os.system('cmd /c "python -m pip install pynput"')
            try: from pynput import keyboard
            except:
                os.system('cmd /c "py -m pip install pynput"')
                try: from pynput import keyboard
                except:
                    tkinter.messagebox.showwarning(title="Can't install automatically", message="Your command for installing modules may be different. Please install pynput manually.")
                    exit()
    else:
        tkinter.messagebox.showwarning(title="Can't run program", message="This program needs pynput to run.")
        exit()
from pynput.mouse import Controller as conmsa
from pynput.keyboard import Key, Controller as conkb

kb = conkb()

#UI
def ClearConsole()->None:
    '''
    ClearConsole()->None
    Clears the console for better display.
    '''
    mouse = conmsa()
    for _ in range(3):
        os.system('cls' if os.name in ('nt', 'dos') else 'clear')
        mouse.scroll(0, 10)
def Title():
    Title = '''
	     \033[1;30;40m▄▄             ▄█▀▄\033[1;37;40m     \033[1;33;40m▄█▄\033[1;37;40m     \033[1;31;40m▄▄ ▄▄\033[1;37;40m     \033[1;32;40m▄▄▄\033[1;37;40m      \033[1;36;40m▄▄\033[1;37;40m      \033[1;30;40m▄▀█▄             ▄▄\033[1;37;40m
	       \033[1;30;40m▀▄       ▄▄▄▄█████\033[1;37;40m  \033[1;33;40m▄█████▄\033[1;37;40m  \033[1;31;40m▀█████▀\033[1;37;40m  \033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m  \033[1;36;40m▄████▄\033[1;37;40m   \033[1;30;40m█████▄▄▄▄       ▄▀\033[1;37;40m
	        \033[1;30;40m▀▄   ▄████▀▀██▀\033[1;37;40m     \033[1;33;40m▀▀▄▀▀\033[1;37;40m     \033[1;31;40m▀█▀\033[1;37;40m    \033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m   \033[1;36;40m▀██▀\033[1;37;40m      \033[1;30;40m▀██▀▀████▄   ▄▀\033[1;37;40m
	         \033[1;30;40m█▄ ▄████▄██▄▀█▄\033[1;37;40m                                        \033[1;30;40m▄█▀▄██▄████▄ ▄█\033[1;37;40m
	          \033[1;30;40m▀██▀████▀ █▄▄▀█▄▄\033[1;37;40m                                  \033[1;30;40m▄▄█▀▄▄█ ▀████▀██▀\033[1;37;40m
	     ▄████████████████████████████████████████████████████████████████████████████▄
	     ███                                                                        ███
	     ███   \033[1;36;40m██████   ██████  ████████████  █████████████  ████████████\033[1;37;40m  \033[1;35;40m██████\033[1;37;40m   ███
	     ███   \033[1;36;40m███   ███   ███  ███      ███  ███       ███  ███      ███\033[1;37;40m     \033[1;35;40m███\033[1;37;40m   ███
	     ███   \033[1;36;40m███   ███   ███  ███      ███  ███       ███  ███      ███\033[1;37;40m  \033[1;35;40m███\033[1;37;40m      ███
	     ███   \033[1;36;40m███   ███   ███  ███      ███  ███       ███  ███      ███\033[1;37;40m  \033[1;35;40m██████\033[1;37;40m   ███
	     ███   \033[1;36;40m███         ███  ████████████  ███       ███  ████████████\033[1;37;40m           ███
	     ███   ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄           ███
	     ███   Alimba, Asuncion, Biñas, Dimaano, De La Fuente,                      ███
	     ███   Echano, Morada, Mortiga, Yaneza                                      ███
	     ███                                                                        ███
	     ▀████████████████████████████████████████████████████████████████████████████▀ '''
    print(Title)
def getCardVisual(*cards):
    """
    getCardVisual(*cards)

    Visualizes the given line of cards.
    - Parameter:
        - cards: One or more cards to display
    """
    cardlines = []
    i = -1
    for i in range(len(cards)//7): cardlines.append(cards[i*7:i*7+7])
    if cards[(i+1)*7:]: cardlines.append(cards[(i+1)*7:])
    finalvisuals = []
    for cards in cardlines:
        # an empty list to store all the parts of the cards
        visual = [[] for _ in range(5)]
        
        for card in cards:
            value = card[:-1]
            card_type = card[-1]
            if card_type == 'u':
                visual[0].append('\033[1;30m╔══════╗\033[1;37;40m')
                visual[1].append('\033[1;30m║↑ ↑ ↑ ║\033[1;37;40m')
                visual[2].append('\033[1;30m║ ↑ ↑ ↑║\033[1;37;40m')
                visual[3].append('\033[1;30m║↑ ↑ ↑ ║\033[1;37;40m')
                visual[4].append('\033[1;30m╚══════╝\033[1;37;40m')
                continue
            elif card_type == 'd':
                visual[0].append('\033[1;30m╔══════╗\033[1;37;40m')
                visual[1].append('\033[1;30m║↓ ↓ ↓ ║\033[1;37;40m')
                visual[2].append('\033[1;30m║ ↓ ↓ ↓║\033[1;37;40m')
                visual[3].append('\033[1;30m║↓ ↓ ↓ ║\033[1;37;40m')
                visual[4].append('\033[1;30m╚══════╝\033[1;37;40m')
                continue
            elif card_type == 'e':
                visual[0].append('\033[1;30m┌──────┐\033[1;37;40m')
                visual[1].append('\033[1;30m|      |\033[1;37;40m')
                visual[2].append('\033[1;30m|      |\033[1;37;40m')
                visual[3].append('\033[1;30m|      |\033[1;37;40m')
                visual[4].append('\033[1;30m└──────┘\033[1;37;40m')
                continue
            elif card_type == 'n':
                visual[0].append('\033[1;30m┌──────┐\033[1;37;40m')
                visual[1].append('\033[1;30m|      |\033[1;37;40m')
                visual[2].append('\033[1;30m|~NONE~|\033[1;37;40m')
                visual[3].append('\033[1;30m|      |\033[1;37;40m')
                visual[4].append('\033[1;30m└──────┘\033[1;37;40m')
                continue
            card_type = f"\033[1;{'33' if card_type == '♠' else '36' if card_type == '♦' else '31' if card_type == '♥' else '32'};40m{card_type}\033[1;37;40m"
            # append the parts of the cards in the variable visual
            visual[0].append('\033[1;37;40m╔══════╗')
            visual[1].append('║{}    ║'.format(value.ljust(2)))
            visual[2].append('║      ║')
            visual[3].append('║    {} ║'.format(card_type))
            visual[4].append('╚══════╝')
        
        CardVisualResult = []
        for line in visual:
            CardVisualResult.append(''.join(line))
    
        finalvisuals.append('            '+'\n            '.join(CardVisualResult))
    return '\n'.join(finalvisuals) + '\033[0m'
def getCardChoiceVisual(ind, *cards:str):
    """
    getCardChoiceVisual(*cards)

    Visualizes the process of chossing cards.
    - Parameter:
        - ind: index of player's choice.
        - cards: One or more cards to display
    """
    cardlines = []
    i = -1
    for i in range(len(cards)//7): cardlines.append(cards[i*7:i*7+7])
    if cards[(i+1)*7:]: cardlines.append(cards[(i+1)*7:])
    finalvisuals = []
    i = 0
    for cards in cardlines:
        # an empty list to store all the parts of the cards
        visual = [[] for _ in range(5)]
        
        for card in cards:
            card_value = card[:-1]
            card_type = card[-1]
            # append the parts of the cards in the variable visual
            if i == ind:
                card_type = f"\033[1;{'33' if card_type == '♠' else '36' if card_type == '♦' else '31' if card_type == '♥' else '32'};40m{card_type}\033[1;37;40m"
                visual[0].append('\033[1;37;40m╔══════╗')
                visual[1].append('║{}    ║'.format(card_value.ljust(2)))
                visual[2].append('║      ║')
                visual[3].append('║    {} ║'.format(card_type))
                visual[4].append('╚══════╝')
            else:
                visual[0].append('      ')
                visual[1].append('\033[1;37;40m╔════╗')
                visual[2].append('║{}  ║'.format(card_value.ljust(2)))
                visual[3].append('║  {} ║'.format(card_type))
                visual[4].append('╚════╝')
            i+=1
        CardVisualResult = []
        for line in visual:
            CardVisualResult.append(''.join(line))
    
        finalvisuals.append('            '+'\n            '.join(CardVisualResult))
    return '\n'.join(finalvisuals) + '\033[0m'
def coinFlipping(*args):
    coinFlipping1 = '''                                 ██             \033[1;33;40m▓▓▓▓▓▓▓▓\033[1;37;40m             ██
                                 ██           \033[1;33;40m▓▓░░      ▓▓\033[1;37;40m           ██  
                                 ██         \033[1;33;40m▓▓░░░░░░░░░░  ▓▓\033[1;37;40m         ██
                                 ██         \033[1;33;40m▓▓░░░░░░░░  ░░▓▓\033[1;37;40m         ██
                                 ██         \033[1;33;40m▓▓░░░░    ░░░░▓▓\033[1;37;40m         ██
                                 ██           \033[1;33;40m▓▓░░░░░░░░▓▓\033[1;37;40m           ██     
                                 ██             \033[1;33;40m▓▓▓▓▓▓▓▓\033[1;37;40m             ██'''
    coinFlipping2 = '''                                 ██               \033[1;33;40m▓▓▓▓\033[1;37;40m               ██
                                 ██             \033[1;33;40m▓▓░░  ▓▓\033[1;37;40m             ██
                                 ██           \033[1;33;40m▓▓░░░░░░  ▓▓\033[1;37;40m           ██
                                 ██           \033[1;33;40m▓▓░░░░  ░░▓▓\033[1;37;40m           ██
                                 ██           \033[1;33;40m▓▓░░░░░░░░▓▓\033[1;37;40m           ██
                                 ██             \033[1;33;40m▓▓░░░░▓▓\033[1;37;40m             ██
                                 ██               \033[1;33;40m▓▓▓▓\033[1;37;40m               ██'''
    coinFlipping3 = '''                                 ██               \033[1;33;40m▓▓▓▓\033[1;37;40m               ██
                                 ██             \033[1;33;40m▓▓░░  ▓▓\033[1;37;40m             ██
                                 ██             \033[1;33;40m▓▓░░  ▓▓\033[1;37;40m             ██
                                 ██             \033[1;33;40m▓▓░░  ▓▓\033[1;37;40m             ██
                                 ██             \033[1;33;40m▓▓░░  ▓▓\033[1;37;40m             ██
                                 ██             \033[1;33;40m▓▓░░  ▓▓\033[1;37;40m             ██
                                 ██               \033[1;33;40m▓▓▓▓\033[1;37;40m               ██'''
    coinFlipping4 = '''                                 ██               \033[1;33;40m▓▓▓▓\033[1;37;40m               ██
                                 ██             \033[1;33;40m▓▓  ░░▓▓\033[1;37;40m             ██
                                 ██           \033[1;33;40m▓▓  ░░░░░░▓▓\033[1;37;40m           ██
                                 ██           \033[1;33;40m▓▓░░  ░░░░▓▓\033[1;37;40m           ██
                                 ██           \033[1;33;40m▓▓░░░░░░░░▓▓\033[1;37;40m           ██
                                 ██             \033[1;33;40m▓▓░░░░▓▓\033[1;37;40m             ██
                                 ██               \033[1;33;40m▓▓▓▓\033[1;37;40m               ██'''
    coinFlippingH = '''                                 ██             \033[1;33;40m▓▓▓▓▓▓▓▓\033[1;37;40m             ██
                                 ██           \033[1;33;40m▓▓░░      ▓▓\033[1;37;40m           ██
                                 ██         \033[1;33;40m▓▓░░░░░░░░░░  ▓▓\033[1;37;40m         ██
                                 ██         \033[1;33;40m▓▓░░░ HEADS ░░▓▓\033[1;37;40m         ██
                                 ██         \033[1;33;40m▓▓░░░░    ░░░░▓▓\033[1;37;40m         ██
                                 ██           \033[1;33;40m▓▓░░░░░░░░▓▓\033[1;37;40m           ██
                                 ██             \033[1;33;40m▓▓▓▓▓▓▓▓\033[1;37;40m             ██'''
    coinFlippingT = '''                                 ██             \033[1;33;40m▓▓▓▓▓▓▓▓\033[1;37;40m             ██
                                 ██           \033[1;33;40m▓▓░░      ▓▓\033[1;37;40m           ██
                                 ██         \033[1;33;40m▓▓░░░░░░░░░░  ▓▓\033[1;37;40m         ██
                                 ██         \033[1;33;40m▓▓░░░ TAILS ░░▓▓\033[1;37;40m         ██
                                 ██         \033[1;33;40m▓▓░░░░    ░░░░▓▓\033[1;37;40m         ██
                                 ██           \033[1;33;40m▓▓░░░░░░░░▓▓\033[1;37;40m           ██
                                 ██             \033[1;33;40m▓▓▓▓▓▓▓▓\033[1;37;40m             ██'''
    if args[0] == 'c':
        for i in range(1, 5):
            ClearConsole()
            print('''
                                  ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
                                 ██▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀██ 
                                 ██              CHOOSE              ██
                                 ██                                  ██''')
            print(eval(f'coinFlipping{i}'))
            print('''                                 ██▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄██
                                  ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀''')
            time.sleep(.1)
        ClearConsole()
        print('''
                                  ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
                                 ██▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀██  
                                 ██              CHOOSE              ██
                                 ██                                  ██''')
        if args[1] == 'Heads': print(coinFlippingH)
        elif args[1] == 'Tails': print(coinFlippingT)
        print('''                                 ██▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄██
                                  ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀''')
    else:
        for i in range(random.randint(10, 30)):
            ClearConsole()
            print('''
                                  ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
                                 ██▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀██ 
                                 ██         TOSSING COIN             ██
                                 ██                                  ██''')
            print(eval(f'coinFlipping{(i%4)+1}'))
            print('''                                 ██▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄██
                                  ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀''')
            time.sleep(.1)
        ClearConsole()
        print('''
                                  ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
                                 ██▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀██ 
                                 ██         TOSSING COIN             ██
                                 ██                                  ██''')
        if args[1] == 'Heads': print(coinFlippingH)
        else: print(coinFlippingT)
        print('''                                 ██▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄██
                                  ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀''')
        if args[0] == 'pvp':
            if args[1] == 'Heads': print(f'                                Mono: {random.choice(["Ohhhh, head!", "It is a head!", "The coin says... head!"])} Player 1 goes first!')
            else: print(f'                                Mono: {random.choice(["Ohhhh, tails!", "It is a tail!", "The coin says... tail!"])} Player 2 goes first!')
        else:
            if args[1] == args[2]: print('                                Mono: You predicted the coin. CONGRATS!!!')
            else: print('                                Mono: HA! WRONG!')
def distribute(gamemode):
    SpadeUser0 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                                        ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                                        ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                                        ╚═══════╝'''
    SpadeUser1 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║╔═══════╗
	                                        ║║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                                        ║║\033[1;33;40m▄█████▄\033[1;37;40m║
	                                        ╚║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                                         ╚═══════╝'''
    SpadeUser2 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║
	                                        ║\033[1;31;40m▀\033[1;37;40m╔═══════╗
	                                        ║ ║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                                        ╚═║\033[1;33;40m▄█████▄\033[1;37;40m║
	                                          ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                                          ╚═══════╝'''
    SpadeUser3 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║
	                                        ║\033[1;31;40m▀█████▀\033[1;37;40m║
	                                        ║  ╔═══════╗
	                                        ╚══║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                                           ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                                           ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                                           ╚═══════╝'''
    SpadeUser4 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║
	                                        ║\033[1;31;40m▀█████▀\033[1;37;40m║
	                                        ║  \033[1;31;40m▀█▀\033[1;37;40m  ║
	                                        ╚═══╔═══════╗
	                                            ║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                                            ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                                            ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                                            ╚═══════╝'''
    SpadeUser5 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║
	                                        ║\033[1;31;40m▀█████▀\033[1;37;40m║
	                                        ║  \033[1;31;40m▀█▀\033[1;37;40m  ║
	                                        ╚═══════╝
	                                             ╔═══════╗
	                                             ║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                                             ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                                             ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                                             ╚═══════╝'''
    SpadeUser6 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║
	                                        ║\033[1;31;40m▀█████▀\033[1;37;40m║
	                                        ║  \033[1;31;40m▀█▀\033[1;37;40m  ║
	                                        ╚═══════╝
	                                              ╔═══════╗
	                                              ║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                                              ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                                              ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                                              ╚═══════╝'''
    SpadeUser7 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║
	                                        ║\033[1;31;40m▀█████▀\033[1;37;40m║
	                                        ║  \033[1;31;40m▀█▀\033[1;37;40m  ║
	                                        ╚═══════╝
	                                               ╔═══════╗
	                                               ║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                                               ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                                               ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                                               ╚═══════╝'''
    SpadeUser8 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║
	                                        ║\033[1;31;40m▀█████▀\033[1;37;40m║
	                                        ║  \033[1;31;40m▀█▀\033[1;37;40m  ║
	                                        ╚═══════╝
	                                                ╔═══════╗
	                                                ║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                                                ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                                                ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                                                ╚═══════╝'''
    SpadeUser9 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║
	                                        ║\033[1;31;40m▀█████▀\033[1;37;40m║
	                                        ║  \033[1;31;40m▀█▀\033[1;37;40m  ║
	                                        ╚═══════╝
	                                                 ╔═══════╗
	                                                 ║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                                                 ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                                                 ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                                                 ╚═══════╝'''
    HeartComputer0 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                       ╔═══════╗║
	                                       ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║║
	                                       ║\033[1;31;40m▀█████▀\033[1;37;40m║║
	                                       ║  \033[1;31;40m▀█▀\033[1;37;40m  ║╝
	                                       ╚═══════╝ ╔═══════╗
	                                                 ║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                                                 ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                                                 ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                                                 ╚═══════╝'''
    HeartComputer1 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                                      ╔═══════╗\033[1;32;40m▄\033[1;37;40m║
	                                      ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║\033[1;32;40m▀\033[1;37;40m║
	                                      ║\033[1;31;40m▀█████▀\033[1;37;40m║═╝
	                                      ║  \033[1;31;40m▀█▀\033[1;37;40m  ║  ╔═══════╗
	                                      ╚═══════╝  ║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                                                 ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                                                 ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                                                 ╚═══════╝'''
    HeartComputer2 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                                        ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                                     ╔═══════╗\033[1;32;40m▀▀\033[1;37;40m║
	                                     ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║══╝
	                                     ║\033[1;31;40m▀█████▀\033[1;37;40m║   ╔═══════╗
	                                     ║  \033[1;31;40m▀█▀\033[1;37;40m  ║   ║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                                     ╚═══════╝   ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                                                 ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                                                 ╚═══════╝'''
    HeartComputer3 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                                        ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                                        ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║
	                                    ╔═══════╗═══╝
	                                    ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║    ╔═══════╗
	                                    ║\033[1;31;40m▀█████▀\033[1;37;40m║    ║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                                    ║  \033[1;31;40m▀█▀\033[1;37;40m  ║    ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                                    ╚═══════╝    ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                                                 ╚═══════╝'''
    HeartComputer4 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                                        ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                                        ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║
	                                        ╚═══════╝
	                                   ╔═══════╗     ╔═══════╗
	                                   ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║     ║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                                   ║\033[1;31;40m▀█████▀\033[1;37;40m║     ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                                   ║  \033[1;31;40m▀█▀\033[1;37;40m  ║     ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                                   ╚═══════╝     ╚═══════╝'''
    HeartComputer5 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                                        ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                                        ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║
	                                        ╚═══════╝
	                                  ╔═══════╗      ╔═══════╗
	                                  ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║      ║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                                  ║\033[1;31;40m▀█████▀\033[1;37;40m║      ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                                  ║  \033[1;31;40m▀█▀\033[1;37;40m  ║      ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                                  ╚═══════╝      ╚═══════╝'''
    HeartComputer6 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                                        ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                                        ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║
	                                        ╚═══════╝
	                                 ╔═══════╗       ╔═══════╗
	                                 ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║       ║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                                 ║\033[1;31;40m▀█████▀\033[1;37;40m║       ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                                 ║  \033[1;31;40m▀█▀\033[1;37;40m  ║       ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                                 ╚═══════╝       ╚═══════╝'''
    HeartComputer7 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                                        ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                                        ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║
	                                        ╚═══════╝
	                                ╔═══════╗        ╔═══════╗
	                                ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║        ║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                                ║\033[1;31;40m▀█████▀\033[1;37;40m║        ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                                ║  \033[1;31;40m▀█▀\033[1;37;40m  ║        ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                                ╚═══════╝        ╚═══════╝'''
    HeartComputer8 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                                        ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                                        ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║
	                                        ╚═══════╝
	                               ╔═══════╗         ╔═══════╗
	                               ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║         ║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                               ║\033[1;31;40m▀█████▀\033[1;37;40m║         ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                               ║  \033[1;31;40m▀█▀\033[1;37;40m  ║         ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                               ╚═══════╝         ╚═══════╝'''
    ClubUser0 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║╔═══════╗
	                                        ║║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                                        ║║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                                        ╚║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║
	                               ╔═══════╗ ╚═══════╝═══════╗
	                               ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║         ║  \033[1;33;40m▄█▄\033[1;37;40m  ║
	                               ║\033[1;31;40m▀█████▀\033[1;37;40m║         ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                               ║  \033[1;31;40m▀█▀\033[1;37;40m  ║         ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                               ╚═══════╝         ╚═══════╝'''
    ClubUser1 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║ \033[1;36;40m▄▄█▄▄\033[1;37;40m ║
	                                        ║\033[1;36;40m▀\033[1;37;40m╔═══════╗
	                                        ║\033[1;36;40m▀\033[1;37;40m║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                                        ╚═║\033[1;32;40m▄▄▀█▀▄▄║
	                               ╔═══════╗  ║\033[1;32;40m▀▀▀▄▀▀▀║══════╗
	                               ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║  ╚═══════╝ \033[1;33;40m▄█▄\033[1;37;40m  ║
	                               ║\033[1;31;40m▀█████▀\033[1;37;40m║         ║\033[1;33;40m▄█████▄\033[1;37;40m║
	                               ║  \033[1;31;40m▀█▀\033[1;37;40m  ║         ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                               ╚═══════╝         ╚═══════╝'''
    ClubUser2 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║ \033[1;36;40m▄▄█▄▄\033[1;37;40m ║
	                                        ║\033[1;36;40m▀█████▀\033[1;37;40m║
	                                        ║  ╔═══════╗
	                                        ╚══║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                               ╔═══════╗   ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║═════╗
	                               ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║   ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║\033[1;33;40m▄█▄\033[1;37;40m  ║
	                               ║\033[1;31;40m▀█████▀\033[1;37;40m║   ╚═══════╝\033[1;33;40m████▄\033[1;37;40m║
	                               ║  \033[1;31;40m▀█▀\033[1;37;40m  ║         ║ \033[1;33;40m▀▀▄▀▀\033[1;37;40m ║
	                               ╚═══════╝         ╚═══════╝'''
    ClubUser3 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║ \033[1;36;40m▄▄█▄▄\033[1;37;40m ║
	                                        ║\033[1;36;40m▀█████▀\033[1;37;40m║
	                                        ║  \033[1;36;40m▀█▀\033[1;37;40m  ║
	                                        ╚═══╔═══════╗
	                               ╔═══════╗    ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║════╗
	                               ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║    ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║\033[1;33;40m█▄\033[1;37;40m  ║
	                               ║\033[1;31;40m▀█████▀\033[1;37;40m║    ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║\033[1;33;40m███▄\033[1;37;40m║
	                               ║  \033[1;31;40m▀█▀\033[1;37;40m  ║    ╚═══════╝\033[1;33;40m▄▀▀\033[1;37;40m ║
	                               ╚═══════╝         ╚═══════╝'''
    ClubUser4 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║ \033[1;36;40m▄▄█▄▄\033[1;37;40m ║
	                                        ║\033[1;36;40m▀█████▀\033[1;37;40m║
	                                        ║  \033[1;36;40m▀█▀\033[1;37;40m  ║
	                                        ╚═══════╝
	                               ╔═══════╗     ╔═══════╗═══╗
	                               ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║     ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║\033[1;33;40m▄\033[1;37;40m  ║
	                               ║\033[1;31;40m▀█████▀\033[1;37;40m║     ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║\033[1;33;40m██▄\033[1;37;40m║
	                               ║  \033[1;31;40m▀█▀\033[1;37;40m  ║     ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║\033[1;33;40m▀▀\033[1;37;40m ║
	                               ╚═══════╝     ╚═══════╝═══╝'''
    ClubUser5 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║ \033[1;36;40m▄▄█▄▄\033[1;37;40m ║
	                                        ║\033[1;36;40m▀█████▀\033[1;37;40m║
	                                        ║  \033[1;36;40m▀█▀\033[1;37;40m  ║
	                                        ╚═══════╝
	                               ╔═══════╗      ╔═══════╗══╗
	                               ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║      ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║  ║
	                               ║\033[1;31;40m▀█████▀\033[1;37;40m║      ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║\033[1;33;40m█▄\033[1;37;40m║
	                               ║  \033[1;31;40m▀█▀\033[1;37;40m  ║      ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║\033[1;33;40m▀\033[1;37;40m ║
	                               ╚═══════╝      ╚═══════╝══╝'''
    ClubUser6 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║ \033[1;36;40m▄▄█▄▄\033[1;37;40m ║
	                                        ║\033[1;36;40m▀█████▀\033[1;37;40m║
	                                        ║  \033[1;36;40m▀█▀\033[1;37;40m  ║
	                                        ╚═══════╝
	                               ╔═══════╗       ╔═══════╗═╗
	                               ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║       ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║ ║
	                               ║\033[1;31;40m▀█████▀\033[1;37;40m║       ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║\033[1;33;40m▄\033[1;37;40m║
	                               ║  \033[1;31;40m▀█▀\033[1;37;40m  ║       ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║ ║
	                               ╚═══════╝       ╚═══════╝═╝'''
    ClubUser7 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║ \033[1;36;40m▄▄█▄▄\033[1;37;40m ║
	                                        ║\033[1;36;40m▀█████▀\033[1;37;40m║
	                                        ║  \033[1;36;40m▀█▀\033[1;37;40m  ║
	                                        ╚═══════╝
	                               ╔═══════╗        ╔═══════╗╗
	                               ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║        ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║║
	                               ║\033[1;31;40m▀█████▀\033[1;37;40m║        ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║║
	                               ║  \033[1;31;40m▀█▀\033[1;37;40m  ║        ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║║
	                               ╚═══════╝        ╚═══════╝╝'''
    ClubUser8 = '''
	                                    Distributing Cards     
	                                        ╔═══════╗
	                                        ║ \033[1;36;40m▄▄█▄▄\033[1;37;40m ║
	                                        ║\033[1;36;40m▀█████▀\033[1;37;40m║
	                                        ║  \033[1;36;40m▀█▀\033[1;37;40m  ║
	                                        ╚═══════╝
	                               ╔═══════╗         ╔═══════╗
	                               ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║         ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                               ║\033[1;31;40m▀█████▀\033[1;37;40m║         ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                               ║  \033[1;31;40m▀█▀\033[1;37;40m  ║         ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║
	                               ╚═══════╝         ╚═══════╝'''
    DiamondComputer0 = '''
	                                    Distributing Cards     
	                                        
	                                       ╔═══════╗
	                                       ║ \033[1;36;40m▄▄█▄▄\033[1;37;40m ║
	                                       ║\033[1;36;40m▀█████▀\033[1;37;40m║
	                                       ║  \033[1;36;40m▀█▀\033[1;37;40m  ║
	                               ╔═══════╚═══════╝ ╔═══════╗
	                               ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m ║         ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                               ║\033[1;31;40m▀█████▀\033[1;37;40m║         ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                               ║  \033[1;31;40m▀█▀\033[1;37;40m  ║         ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║
	                               ╚═══════╝         ╚═══════╝'''
    DiamondComputer1 = '''
	                                    Distributing Cards     
	                                        
	                                        
	                                      ╔═══════╗
	                                      ║ \033[1;36;40m▄▄█▄▄\033[1;37;40m ║
	                                      ║\033[1;36;40m▀█████▀\033[1;37;40m║
	                               ╔══════║  \033[1;36;40m▀█▀\033[1;37;40m  ║  ╔═══════╗
	                               ║ \033[1;31;40m▄▄ ▄▄\033[1;37;40m╚═══════╝  ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                               ║\033[1;31;40m▀█████▀\033[1;37;40m║         ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                               ║  \033[1;31;40m▀█▀\033[1;37;40m  ║         ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║
	                               ╚═══════╝         ╚═══════╝'''
    DiamondComputer2 = '''
	                                    Distributing Cards     
	                                        
	                                        
	                                        
	                                     ╔═══════╗
	                                     ║ \033[1;36;40m▄▄█▄▄\033[1;37;40m ║
	                               ╔═════║\033[1;36;40m▀█████▀\033[1;37;40m║   ╔═══════╗
	                               ║ \033[1;31;40m▄▄ ▄\033[1;37;40m║  \033[1;36;40m▀█▀\033[1;37;40m  ║   ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                               ║\033[1;31;40m▀████\033[1;37;40m╚═══════╝   ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                               ║  \033[1;31;40m▀█▀\033[1;37;40m  ║         ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║
	                               ╚═══════╝         ╚═══════╝'''
    DiamondComputer3 = '''
	                                    Distributing Cards     
	                                        
	                                        
	                                        
	                                        
	                                    ╔═══════╗
	                               ╔════║ \033[1;36;40m▄▄█▄▄\033[1;37;40m ║    ╔═══════╗
	                               ║ \033[1;31;40m▄▄\033[1;37;40m ║\033[1;36;40m▀█████▀\033[1;37;40m║    ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                               ║\033[1;31;40m▀███\033[1;37;40m║  \033[1;36;40m▀█▀\033[1;37;40m  ║    ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                               ║  \033[1;31;40m▀█\033[1;37;40m╚═══════╝    ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║
	                               ╚═══════╝         ╚═══════╝'''
    DiamondComputer4 = '''
	                                    Distributing Cards     
	                                        
	                                        
	                                        
	                                        
	                                        
	                               ╔═══╔═══════╗     ╔═══════╗
	                               ║ \033[1;31;40m▄▄\033[1;37;40m║ \033[1;36;40m▄▄█▄▄\033[1;37;40m ║     ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                               ║\033[1;31;40m▀██\033[1;37;40m║\033[1;36;40m▀█████▀\033[1;37;40m║     ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                               ║  \033[1;31;40m▀\033[1;37;40m║  \033[1;36;40m▀█▀\033[1;37;40m  ║     ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║
	                               ╚═══╚═══════╝     ╚═══════╝'''
    DiamondComputer5 = '''
	                                    Distributing Cards     
	                                        
	                                        
	                                        
	                                        
	                                        
	                               ╔══╔═══════╗      ╔═══════╗
	                               ║ \033[1;31;40m▄\033[1;37;40m║ \033[1;36;40m▄▄█▄▄\033[1;37;40m ║      ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                               ║\033[1;31;40m▀█\033[1;37;40m║\033[1;36;40m▀█████▀\033[1;37;40m║      ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                               ║  ║  \033[1;36;40m▀█▀\033[1;37;40m  ║      ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║
	                               ╚══╚═══════╝      ╚═══════╝'''
    DiamondComputer6 = '''
	                                    Distributing Cards     
	                                        
	                                        
	                                        
	                                        
	                                        
	                               ╔═╔═══════╗       ╔═══════╗
	                               ║ ║ \033[1;36;40m▄▄█▄▄\033[1;37;40m ║       ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                               ║\033[1;31;40m▀\033[1;37;40m║\033[1;36;40m▀█████▀\033[1;37;40m║       ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                               ║ ║  \033[1;36;40m▀█▀\033[1;37;40m  ║       ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║
	                               ╚═╚═══════╝       ╚═══════╝'''
    DiamondComputer7 = '''
	                                    Distributing Cards     
	                                        
	                                        
	                                        
	                                         
	                                         
	                               ╔╔═══════╗        ╔═══════╗
	                               ║║ \033[1;36;40m▄▄█▄▄\033[1;37;40m ║        ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                               ║║\033[1;36;40m▀█████▀\033[1;37;40m║        ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                               ║║  \033[1;36;40m▀█▀\033[1;37;40m  ║        ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║
	                               ╚╚═══════╝        ╚═══════╝'''
    DiamondComputer8 = '''
	                                    Distributing Cards     
	                                        
	                                        
	                                        
	                                         
	                                         
	                               ╔═══════╗         ╔═══════╗
	                               ║ \033[1;36;40m▄▄█▄▄\033[1;37;40m ║         ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                               ║\033[1;36;40m▀█████▀\033[1;37;40m║         ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                               ║  \033[1;36;40m▀█▀\033[1;37;40m  ║         ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║
	                               ╚═══════╝         ╚═══════╝'''
    DiamondComputer9 = '''
	                                        
	                                          
	                                          
	                                          CARDS
	                         ╔{2}╗    DISTRIBUTED     ╔{3}╗
	                         ║\033[1;37;46m{0}\033[1;37;40m║                    ║\033[1;37;42m{1}\033[1;37;40m║
	                         ╚═════╔═══════╗         ╔═══════╗{4}╝
	                               ║ \033[1;36;40m▄▄█▄▄\033[1;37;40m ║         ║  \033[1;32;40m▄▄▄\033[1;37;40m  ║
	                               ║\033[1;36;40m▀█████▀\033[1;37;40m║         ║\033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m║
	                               ║  \033[1;36;40m▀█▀\033[1;37;40m  ║         ║\033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m║
	                               ╚═══════╝         ╚═══════╝'''
    for i in range(10):
        ClearConsole()
        print(eval(f'SpadeUser{i}'))
        time.sleep(.1)
    for i in range(9):
        ClearConsole()
        print(eval(f'HeartComputer{i}'))
        time.sleep(.1)
    for i in range(9):
        ClearConsole()
        print(eval(f'ClubUser{i}'))
        time.sleep(.1)
    for i in range(9):
        ClearConsole()
        print(eval(f'DiamondComputer{i}'))
        time.sleep(.1)
    ClearConsole()
    if gamemode == 'PVP': print(DiamondComputer9.format('Player1', 'Player2', '═'*7, '═'*7, '═'*4))
    else: print(DiamondComputer9.format('  Mono  ', '  User  ', '═'*8, '═'*8, '═'*6))
def shuffling():
    SNAIL1 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING              ██
                              ██                                   ██
                              ██                                   ██
                              ██                                   ██
                              ██                                   ██
                              ██                                   ██
                              ▀█████████████████████████████████████▀'''
    SNAIL2 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING.             ██
                              ██                                   ██
                              ██                                   ██
                              ██                                   ██
                              ██\033[1;30;40m▀\033[1;37;40m                                  ██
                              ██                                   ██
                              ▀█████████████████████████████████████▀'''
    SNAIL3 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING..            ██
                              ██                                   ██
                              ██                                   ██
                              ██                                   ██
                              ██\033[1;30;40m▀▄▀\033[1;37;40m                                ██
                              ██\033[1;30;40m█▀\033[1;37;40m                                 ██
                              ▀█████████████████████████████████████▀'''
    SNAIL4 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING...           ██
                              ██                                   ██
                              ██                                   ██
                              ██\033[1;30;40m█\033[1;37;40m                                  ██
                              ██\033[1;30;40m█▄█▄▄▀\033[1;37;40m                             ██
                              ██\033[1;30;40m█▀▀\033[1;37;40m                                ██
                              ▀█████████████████████████████████████▀'''
    SNAIL5 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING              ██
                              ██                                   ██
                              ██\033[1;30;40m▀▄\033[1;37;40m                                 ██
                              ██\033[1;30;40m █\033[1;37;40m                                 ██
                              ██\033[1;30;40m▀█▄▀▄▀\033[1;37;40m                             ██
                              ██\033[1;30;40m▄███▀\033[1;37;40m                              ██
                              ▀█████████████████████████████████████▀'''
    SNAIL6 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING.             ██
                              ██\033[1;30;40m▄\033[1;37;40m                                  ██
                              ██\033[1;30;40m ▀▄\033[1;37;40m                                ██
                              ██\033[1;30;40m▀  █\033[1;37;40m                               ██
                              ██\033[1;30;40m▄▀ █▄█▄▄▀\033[1;37;40m                          ██
                              ██\033[1;30;40m▄███▀▀\033[1;37;40m                             ██
                              ▀█████████████████████████████████████▀'''
    SNAIL7 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING..            ██
                              ██\033[1;30;40m▄▄▄\033[1;37;40m                                ██
                              ██\033[1;30;40m ▄ ▀▄\033[1;37;40m                              ██
                              ██\033[1;30;40m█▄▀ █\033[1;37;40m                              ██
                              ██\033[1;30;40m▀▄▄▀█▄▀▄▀\033[1;37;40m                          ██
                              ██\033[1;30;40m▄▄▄▄███▀\033[1;37;40m                           ██
                              ▀█████████████████████████████████████▀'''
    SNAIL8 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING...           ██
                              ██\033[1;30;40m ▄▄▄\033[1;37;40m                               ██
                              ██\033[1;30;40m▀▄▄ ▀▄\033[1;37;40m                             ██
                              ██\033[1;30;40m█ ▄▀  █\033[1;37;40m                            ██
                              ██\033[1;30;40m▀▄▄▄▀ █▄█▄▄▀\033[1;37;40m                       ██
                              ██\033[1;30;40m▄▄▄▄███▀▀\033[1;37;40m                          ██
                              ▀█████████████████████████████████████▀'''
    SNAIL9 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING              ██
                              ██\033[1;30;40m ▄▄▄\033[1;37;40m                               ██
                              ██\033[1;30;40m▀▄▄ ▀▄\033[1;37;40m                             ██
                              ██\033[1;30;40m█ ▄▀  █\033[1;37;40m                            ██
                              ██\033[1;30;40m▀▄▄▄▀ █▄█▄▄▀\033[1;37;40m                       ██
                              ██\033[1;30;40m▄▄▄▄████▀▀\033[1;37;40m                         ██
                              ▀█████████████████████████████████████▀'''  
    SNAIL10 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING.             ██
                              ██\033[1;30;40m   ▄▄▄\033[1;37;40m                             ██
                              ██\033[1;30;40m ▄▀ ▄ ▀▄\033[1;37;40m                           ██
                              ██\033[1;30;40m █ █▄▀ █\033[1;37;40m                           ██
                              ██\033[1;30;40m █ ▀▄▄▀█▄▀▄▀\033[1;37;40m                       ██
                              ██\033[1;30;40m▄▄█▄▄▄▄███▀\033[1;37;40m                        ██
                              ▀█████████████████████████████████████▀'''
    SNAIL11 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING..            ██
                              ██\033[1;30;40m    ▄▄▄\033[1;37;40m                            ██
                              ██\033[1;30;40m  █▀▄▄ ▀▄\033[1;37;40m                          ██
                              ██\033[1;30;40m █ █ ▄▀  █\033[1;37;40m                         ██
                              ██\033[1;30;40m █ ▀▄▄▄▀ █▄█▄▄▀\033[1;37;40m                    ██
                              ██\033[1;30;40m▄▄█▄▄▄▄███▀▀\033[1;37;40m                       ██
                              ▀█████████████████████████████████████▀'''
    SNAIL12 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING...           ██
                              ██\033[1;30;40m    ▄▄▄\033[1;37;40m                            ██
                              ██\033[1;30;40m  █▀▄▄ ▀▄\033[1;37;40m                          ██
                              ██\033[1;30;40m █ █ ▄▀  █\033[1;37;40m                         ██ 
                              ██\033[1;30;40m █ ▀▄▄▄▀ █▄█▄▄▀\033[1;37;40m                    ██
                              ██\033[1;30;40m▄▄█▄▄▄▄████▀▀\033[1;37;40m                      ██
                              ▀█████████████████████████████████████▀'''
    SNAIL13 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING              ██
                              ██\033[1;30;40m      ▄▄▄\033[1;37;40m                          ██
                              ██\033[1;30;40m    ▄▀ ▄ ▀▄\033[1;37;40m                        ██
                              ██\033[1;30;40m    █ █▄▀ █\033[1;37;40m                        ██
                              ██\033[1;30;40m    █ ▀▄▄▀█▄▀▄▀\033[1;37;40m                    ██
                              ██\033[1;30;40m   ▄▄█▄▄▄▄███▀\033[1;37;40m                     ██
                              ▀█████████████████████████████████████▀'''
    SNAIL14 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING.             ██
                              ██\033[1;30;40m       ▄▄▄\033[1;37;40m                         ██
                              ██\033[1;30;40m     █▀▄▄ ▀▄\033[1;37;40m                       ██
                              ██\033[1;30;40m    █ █ ▄▀  █\033[1;37;40m                      ██
                              ██\033[1;30;40m    █ ▀▄▄▄▀ █▄█▄▄▀\033[1;37;40m                 ██
                              ██\033[1;30;40m   ▄▄█▄▄▄▄███▀▀\033[1;37;40m                    ██
                              ▀█████████████████████████████████████▀'''
    SNAIL15 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING..            ██
                              ██\033[1;30;40m       ▄▄▄\033[1;37;40m                         ██
                              ██\033[1;30;40m     █▀▄▄ ▀▄\033[1;37;40m                       ██
                              ██\033[1;30;40m    █ █ ▄▀  █\033[1;37;40m                      ██
                              ██\033[1;30;40m    █ ▀▄▄▄▀ █▄█▄▄▀\033[1;37;40m                 ██
                              ██\033[1;30;40m   ▄▄█▄▄▄▄████▀▀\033[1;37;40m                   ██
                              ▀█████████████████████████████████████▀'''
    SNAIL16 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING...           ██
                              ██\033[1;30;40m        ▄▄▄\033[1;37;40m                        ██
                              ██\033[1;30;40m      ▄▀ ▄ ▀▄\033[1;37;40m                      ██
                              ██\033[1;30;40m      █ █▄▀ █\033[1;37;40m                      ██
                              ██\033[1;30;40m      █ ▀▄▄▀█▄▀▄▀\033[1;37;40m                  ██
                              ██\033[1;30;40m     ▄▄█▄▄▄▄███▀\033[1;37;40m                   ██
                              ▀█████████████████████████████████████▀'''
    SNAIL17 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING              ██
                              ██\033[1;30;40m         ▄▄▄\033[1;37;40m                       ██
                              ██\033[1;30;40m       █▀▄▄ ▀▄\033[1;37;40m                     ██
                              ██\033[1;30;40m      █ █ ▄▀  █\033[1;37;40m                    ██
                              ██\033[1;30;40m      █ ▀▄▄▄▀ █▄█▄▄▀\033[1;37;40m               ██
                              ██\033[1;30;40m     ▄▄█▄▄▄▄███▀▀\033[1;37;40m                  ██
                              ▀█████████████████████████████████████▀'''
    SNAIL18 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING.             ██
                              ██\033[1;30;40m         ▄▄▄\033[1;37;40m                       ██
                              ██\033[1;30;40m       █▀▄▄ ▀▄\033[1;37;40m                     ██
                              ██\033[1;30;40m      █ █ ▄▀  \033[1;37;40m                     ██
                              ██\033[1;30;40m      █ ▀▄▄▄▀ █▄█▄▄▀\033[1;37;40m               ██
                              ██\033[1;30;40m     ▄▄█▄▄▄▄████▀▀\033[1;37;40m                 ██
                              ▀█████████████████████████████████████▀'''
    SNAIL19 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING..            ██
                              ██\033[1;30;40m            ▄▄▄\033[1;37;40m                    ██
                              ██\033[1;30;40m          ▄▀ ▄ ▀▄\033[1;37;40m                  ██
                              ██\033[1;30;40m          █ █▄▀ █\033[1;37;40m                  ██
                              ██\033[1;30;40m          █ ▀▄▄▀█▄▀▄▀\033[1;37;40m              ██
                              ██\033[1;30;40m         ▄▄█▄▄▄▄███▀\033[1;37;40m               ██
                              ▀█████████████████████████████████████▀'''
    SNAIL20 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING...           ██
                              ██\033[1;30;40m             ▄▄▄\033[1;37;40m                   ██
                              ██\033[1;30;40m           █▀▄▄ ▀▄\033[1;37;40m                 ██
                              ██\033[1;30;40m          █ █ ▄▀  \033[1;37;40m                 ██
                              ██\033[1;30;40m          █ ▀▄▄▄▀ █▄█▄▄▀\033[1;37;40m           ██
                              ██\033[1;30;40m         ▄▄█▄▄▄▄███▀▀\033[1;37;40m              ██
                              ▀█████████████████████████████████████▀'''
    SNAIL21 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING              ██
                              ██\033[1;30;40m             ▄▄▄\033[1;37;40m                   ██
                              ██\033[1;30;40m           █▀▄▄ ▀▄\033[1;37;40m                 ██
                              ██\033[1;30;40m          █ █ ▄▀  █\033[1;37;40m                ██    
                              ██\033[1;30;40m          █ ▀▄▄▄▀ █▄█▄▄▀\033[1;37;40m           ██
                              ██\033[1;30;40m         ▄▄█▄▄▄▄████▀▀\033[1;37;40m             ██
                              ▀█████████████████████████████████████▀'''
    SNAIL22 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING.             ██
                              ██\033[1;30;40m               ▄▄▄\033[1;37;40m                 ██
                              ██\033[1;30;40m             ▄▀ ▄ ▀▄\033[1;37;40m               ██
                              ██\033[1;30;40m             █ █▄▀ █\033[1;37;40m               ██
                              ██\033[1;30;40m             █ ▀▄▄▀█▄▀▄▀\033[1;37;40m           ██
                              ██\033[1;30;40m            ▄▄█▄▄▄▄███▀\033[1;37;40m            ██
                              ▀█████████████████████████████████████▀'''
    SNAIL23 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING..            ██
                              ██\033[1;30;40m                ▄▄▄\033[1;37;40m                ██
                              ██\033[1;30;40m              █▀▄▄ ▀▄\033[1;37;40m              ██
                              ██\033[1;30;40m             █ █ ▄▀  \033[1;37;40m              ██
                              ██\033[1;30;40m             █ ▀▄▄▄▀ █▄█▄▄▀\033[1;37;40m        ██
                              ██\033[1;30;40m            ▄▄█▄▄▄▄███▀▀\033[1;37;40m           ██
                              ▀█████████████████████████████████████▀'''
    SNAIL24 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING...           ██
                              ██\033[1;30;40m                ▄▄▄\033[1;37;40m                ██
                              ██\033[1;30;40m              █▀▄▄ ▀▄\033[1;37;40m              ██
                              ██\033[1;30;40m             █ █ ▄▀  █\033[1;37;40m             ██
                              ██\033[1;30;40m             █ ▀▄▄▄▀ █▄█▄▄▀\033[1;37;40m        ██    
                              ██\033[1;30;40m            ▄▄█▄▄▄▄████▀▀\033[1;37;40m          ██
                              ▀█████████████████████████████████████▀'''
    SNAIL25 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING              ██
                              ██\033[1;30;40m                  ▄▄▄\033[1;37;40m              ██
                              ██\033[1;30;40m                ▄▀ ▄ ▀▄\033[1;37;40m            ██
                              ██\033[1;30;40m                █ █▄▀ █\033[1;37;40m            ██
                              ██\033[1;30;40m                █ ▀▄▄▀█▄▀▄▀\033[1;37;40m        ██
                              ██\033[1;30;40m               ▄▄█▄▄▄▄███▀\033[1;37;40m         ██
                              ▀█████████████████████████████████████▀'''
    SNAIL26 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING.             ██
                              ██\033[1;30;40m                   ▄▄▄\033[1;37;40m             ██
                              ██\033[1;30;40m                 █▀▄▄ ▀▄\033[1;37;40m           ██
                              ██\033[1;30;40m                █ █ ▄▀  █\033[1;37;40m          ██
                              ██\033[1;30;40m                █ ▀▄▄▄▀ █▄█▄▄▀\033[1;37;40m     ██
                              ██\033[1;30;40m               ▄▄█▄▄▄▄███▀▀\033[1;37;40m        ██
                              ▀█████████████████████████████████████▀'''
    SNAIL27 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING..            ██
                              ██\033[1;30;40m                   ▄▄▄\033[1;37;40m             ██
                              ██\033[1;30;40m                 █▀▄▄ ▀▄\033[1;37;40m           ██
                              ██\033[1;30;40m                █ █ ▄▀  █\033[1;37;40m          ██
                              ██\033[1;30;40m                █ ▀▄▄▄▀ █▄█▄▄▀\033[1;37;40m     ██
                              ██\033[1;30;40m               ▄▄█▄▄▄▄████▀▀\033[1;37;40m       ██
                              ▀█████████████████████████████████████▀'''
    SNAIL28 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING...           ██
                              ██\033[1;30;40m                     ▄▄▄\033[1;37;40m           ██
                              ██\033[1;30;40m                   ▄▀ ▄ ▀▄\033[1;37;40m         ██
                              ██\033[1;30;40m                   █ █▄▀ █\033[1;37;40m         ██
                              ██\033[1;30;40m                   █ ▀▄▄▀█▄▀▄▀\033[1;37;40m     ██
                              ██\033[1;30;40m                  ▄▄█▄▄▄▄███▀\033[1;37;40m      ██
                              ▀█████████████████████████████████████▀'''
    SNAIL29 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING              ██
                              ██\033[1;30;40m                      ▄▄▄\033[1;37;40m          ██
                              ██\033[1;30;40m                    █▀▄▄ ▀▄\033[1;37;40m        ██
                              ██\033[1;30;40m                   █ █ ▄▀  █\033[1;37;40m       ██  
                              ██\033[1;30;40m                   █ ▀▄▄▄▀ █▄█▄▄▀\033[1;37;40m  ██
                              ██\033[1;30;40m                  ▄▄█▄▄▄▄███▀▀\033[1;37;40m     ██
                              ▀█████████████████████████████████████▀'''
    SNAIL30 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING.             ██
                              ██\033[1;30;40m                      ▄▄▄\033[1;37;40m          ██
                              ██\033[1;30;40m                    █▀▄▄ ▀▄\033[1;37;40m        ██
                              ██\033[1;30;40m                   █ █ ▄▀  █\033[1;37;40m       ██
                              ██\033[1;30;40m                   █ ▀▄▄▄▀ █▄█▄▄▀\033[1;37;40m  ██
                              ██\033[1;30;40m                  ▄▄█▄▄▄▄████▀▀\033[1;37;40m    ██
                              ▀█████████████████████████████████████▀'''
    SNAIL31 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING..            ██
                              ██\033[1;30;40m                        ▄▄▄\033[1;37;40m        ██
                              ██\033[1;30;40m                      ▄▀ ▄ ▀▄\033[1;37;40m      ██
                              ██\033[1;30;40m                      █ █▄▀ █\033[1;37;40m      ██
                              ██\033[1;30;40m                      █ ▀▄▄▀█▄▀▄▀\033[1;37;40m  ██
                              ██\033[1;30;40m                     ▄▄█▄▄▄▄███▀\033[1;37;40m   ██
                              ▀█████████████████████████████████████▀'''
    SNAIL32 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING...           ██
                              ██\033[1;30;40m                         ▄▄▄\033[1;37;40m       ██
                              ██\033[1;30;40m                       █▀▄▄ ▀▄\033[1;37;40m     ██
                              ██\033[1;30;40m                      █ █ ▄▀  █\033[1;37;40m    ██
                              ██\033[1;30;40m                      █ ▀▄▄▄▀ █▄█▄▄\033[1;37;40m██
                              ██\033[1;30;40m                     ▄▄█▄▄▄▄███▀▀\033[1;37;40m  ██
                              ▀█████████████████████████████████████▀'''
    SNAIL33 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING              ██
                              ██\033[1;30;40m                         ▄▄▄\033[1;37;40m       ██
                              ██\033[1;30;40m                       █▀▄▄ ▀▄\033[1;37;40m     ██
                              ██\033[1;30;40m                      █ █ ▄▀  █\033[1;37;40m    ██
                              ██\033[1;30;40m                      █ ▀▄▄▄▀ █▄█▄▄\033[1;37;40m██
                              ██\033[1;30;40m                     ▄▄█▄▄▄▄████▀▀\033[1;37;40m ██
                              ▀█████████████████████████████████████▀'''
    SNAIL34 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING.             ██
                              ██\033[1;30;40m                           ▄▄▄\033[1;37;40m     ██
                              ██\033[1;30;40m                         ▄▀ ▄ ▀▄\033[1;37;40m   ██
                              ██\033[1;30;40m                         █ █▄▀ █\033[1;37;40m   ██
                              ██\033[1;30;40m                         █ ▀▄▄▀█▄▀▄\033[1;37;40m██
                              ██\033[1;30;40m                        ▄▄█▄▄▄▄███▀\033[1;37;40m██
                              ▀█████████████████████████████████████▀'''
    SNAIL35 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING..            ██
                              ██\033[1;30;40m                            ▄▄▄\033[1;37;40m    ██
                              ██\033[1;30;40m                          █▀▄▄ ▀▄\033[1;37;40m  ██
                              ██\033[1;30;40m                         █ █ ▄▀  \033[1;37;40m  ██
                              ██\033[1;30;40m                         █ ▀▄▄▄▀ █▄\033[1;37;40m██
                              ██\033[1;30;40m                        ▄▄█▄▄▄▄███▀\033[1;37;40m██
                              ▀█████████████████████████████████████▀'''
    SNAIL36 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING...           ██
                              ██\033[1;30;40m                            ▄▄▄\033[1;37;40m    ██
                              ██\033[1;30;40m                          █▀▄▄ ▀▄\033[1;37;40m  ██
                              ██\033[1;30;40m                         █ █ ▄▀  █\033[1;37;40m ██
                              ██\033[1;30;40m                         █ ▀▄▄▄▀ █▄\033[1;37;40m██
                              ██\033[1;30;40m                        ▄▄█▄▄▄▄████\033[1;37;40m██
                              ▀█████████████████████████████████████▀'''
    SNAIL37 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING              ██
                              ██\033[1;30;40m                              ▄▄▄\033[1;37;40m  ██
                              ██\033[1;30;40m                            ▄▀ ▄ ▀▄\033[1;37;40m██
                              ██\033[1;30;40m                            █ █▄▀ █\033[1;37;40m██
                              ██\033[1;30;40m                            █ ▀▄▄▀█\033[1;37;40m██
                              ██\033[1;30;40m                           ▄▄█▄▄▄▄█\033[1;37;40m██
                              ▀█████████████████████████████████████▀'''
    SNAIL38 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING.             ██
                              ██\033[1;30;40m                               ▄▄▄\033[1;37;40m ██
                              ██\033[1;30;40m                             █▀▄▄ ▀\033[1;37;40m██
                              ██\033[1;30;40m                            █ █ ▄▀ \033[1;37;40m██
                              ██\033[1;30;40m                            █ ▀▄▄▄▀\033[1;37;40m██
                              ██\033[1;30;40m                           ▄▄█▄▄▄▄█\033[1;37;40m██
                              ▀█████████████████████████████████████▀'''
    SNAIL39 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING..            ██
                              ██\033[1;30;40m                               ▄▄▄\033[1;37;40m ██
                              ██\033[1;30;40m                             █▀▄▄ ▀\033[1;37;40m██
                              ██\033[1;30;40m                            █ █ ▄▀ \033[1;37;40m██
                              ██\033[1;30;40m                            █ ▀▄▄▄▀\033[1;37;40m██
                              ██\033[1;30;40m                           ▄▄█▄▄▄▄█\033[1;37;40m██
                              ▀█████████████████████████████████████▀'''
    SNAIL40 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING...           ██
                              ██\033[1;30;40m                                 ▄▄\033[1;37;40m██
                              ██\033[1;30;40m                               ▄▀ ▄\033[1;37;40m██
                              ██\033[1;30;40m                               █ █▄\033[1;37;40m██
                              ██\033[1;30;40m                               █ ▀▄\033[1;37;40m██
                              ██\033[1;30;40m                              ▄▄█▄▄\033[1;37;40m██
                              ▀█████████████████████████████████████▀'''
    SNAIL41 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING              ██
                              ██\033[1;30;40m                                  ▄\033[1;37;40m██
                              ██\033[1;30;40m                                █▀▄\033[1;37;40m██
                              ██\033[1;30;40m                               █ █ \033[1;37;40m██
                              ██\033[1;30;40m                               █ ▀▄\033[1;37;40m██
                              ██\033[1;30;40m                              ▄▄█▄▄\033[1;37;40m██
                              ▀█████████████████████████████████████▀'''
    SNAIL42 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING.             ██
                              ██\033[1;30;40m                                   \033[1;37;40m██
                              ██\033[1;30;40m                                  ▄\033[1;37;40m██
                              ██\033[1;30;40m                                  █\033[1;37;40m██
                              ██\033[1;30;40m                                  █\033[1;37;40m██
                              ██\033[1;30;40m                                 ▄▄\033[1;37;40m██
                              ▀█████████████████████████████████████▀'''
    SNAIL43 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING..            ██
                              ██\033[1;30;40m                                   \033[1;37;40m██
                              ██\033[1;30;40m                                   \033[1;37;40m██
                              ██\033[1;30;40m                                  █\033[1;37;40m██
                              ██\033[1;30;40m                                  █\033[1;37;40m██
                              ██\033[1;30;40m                                 ▄▄\033[1;37;40m██
                              ▀█████████████████████████████████████▀'''
    SNAIL44 = '''
                              ▄█████████████████████████████████████▄
                              ██            SHUFFLING...           ██
                              ██\033[1;30;40m                                   \033[1;37;40m██
                              ██\033[1;30;40m                                   \033[1;37;40m██
                              ██\033[1;30;40m                                   \033[1;37;40m██
                              ██\033[1;30;40m                                   \033[1;37;40m██
                              ██\033[1;30;40m                                  ▄\033[1;37;40m██
                              ▀█████████████████████████████████████▀'''
    for i in range(1, 45):
        ClearConsole()
        print(eval(f'SNAIL{i}'))
def FinalCards(*cards):
    """
    FinalCards(*cards)

    Prints the two final cards.
    - Parameter:
        - cards: One or more cards to display
    """
    visual = [[] for _ in range(5)]
    for card in cards:
        value = card[:-1]
        card_type = card[-1]
        
        card_type = f"\033[1;{'33' if card_type == '♠' else '36' if card_type == '♦' else '31' if card_type == '♥' else '32'};40m{card_type}\033[1;37;40m"
        # append the parts of the cards in the variable visual
        visual[0].append('\033[1;37;40m╔══════╗')
        visual[1].append('\033[1;37;40m║{}    ║'.format(value.ljust(2)))
        visual[2].append('\033[1;37;40m║      ║')
        visual[3].append('\033[1;37;40m║    {} ║'.format(card_type))
        visual[4].append('\033[1;37;40m╚══════╝')
    for i, line in enumerate(visual): print(' '*44+''.join(line))
#Linked List Data Type
class node:
    def __init__(self,data=None):
        self.data=data
        self.next=None
class linked_list:
    def __init__(self):
        self.head = node()
    def append(self,data):
        new_node = node(data)
        cur = self.head
        while cur.next != None: cur = cur.next
        cur.next = new_node
    def length(self):
        cur = self.head
        total = 0
        while cur.next != None:
            total += 1
            cur = cur.next
        return total
    def display(self) -> list:
        elems = []
        cur_node = self.head
        while cur_node.next!=None:
            cur_node=cur_node.next
            elems.append(cur_node.data)
        return elems
    def get(self,index):
        if index>=self.length():
            print('ERROR: Get Index out of range!')
            return
        cur_idx=0
        cur_node=self.head
        while True:
            cur_node=cur_node.next
            if cur_idx==index: return cur_node.data
            cur_idx+=1
    def erase(self,index):
        if index>=self.length():
            print('ERROR: Erase Index out of range!')
            return
        cur_idx=0
        cur_node=self.head
        while True:
            last_node = cur_node
            cur_node = cur_node.next
            if cur_idx==index:
                last_node.next = cur_node.next
                return
            cur_idx+=1
    def shuffle(self):
        listobject = self.display()
        random.shuffle(listobject)
        self.head = node()
        for i in listobject: self.append(i)

#Utilities
def PressToNext(spacing = 0):
    def next_on_press(key):
        '''
        next_on_press(key)
        
        Called for every keypress.
        - Parameter:
            - key: contains the key pressed.
        '''
        if key == keyboard.Key.enter: return False
    print('\n\n\n')
    print('♠---------------------------♥'.center(spacing))
    print('  ~Press Enter to continue~  '.center(spacing))
    print('♣---------------------------♦'.center(spacing))
    with keyboard.Listener(on_press=next_on_press) as listener: listener.join()

#Menu
def MainMenuManager() -> str:
    '''
    MainMenuManager()

    Manages the main menu process and returns the gamemode.
    - Return: str
    '''
    played = False
    while not played:
        while True:
            ClearConsole()
            kb.tap('a')
            Menuchoice = MainMenu()
            if Menuchoice == "A": break
            elif Menuchoice == "B": AboutGame()
            elif Menuchoice == "C": How()
            elif Menuchoice == "D":
                kb.tap(keyboard.Key.f11)
                ClearConsole()
                exit()
        gamemode = 0
        while True:
            ClearConsole()
            kb.tap('a')
            gamemode = GameMode()
            if gamemode in ["PVP", "leg", "dev"]:
                played = True
                break
            elif gamemode == "cancel": break
    return gamemode
def MainMenu() -> str:
    '''
    MainMenu()

    Displays Main Menu and lets the user pick using up and down buttons. Returns the choice.
    - Return: str
    '''
    def ScreenMenu():
        '''
        ScreenMenu()

        Displays the menu.
        '''
        nonlocal Menuchoice
        ClearConsole()
        Title()
        for i, j in enumerate(displays):
            if i == Menuchoice:
                if Menuchoice == 0: print(f' \033[1;32;40m{j}\033[0m ▴▾')
                elif Menuchoice == 3: print(f' \033[1;33;40m{j}\033[0m ▴▾')
                else: print(f' \033[1;36;40m{j}\033[0m ▴▾')
            else: print(f'{j}')
        print('\n\n')
        print(' '*12+'╔═══════════════════════════════════════════════════════════╗')
        print(' '*12+'║Tips:                                                      ║')
        print(' '*12+'║ You can use up and down arrows to choose from the choices.║')
        print(' '*12+'║ Press Enter to confirm the highlighted choice.            ║')
        print(' '*12+'╚═══════════════════════════════════════════════════════════╝')
    def on_press(key):
        '''
        on_press(key)

        Reacts with the key listener and affects the ScreenMenu.
        '''
        nonlocal Menuchoice
        if key == keyboard.Key.up:
            Menuchoice -= 1
            if Menuchoice == -1: Menuchoice = 3
        elif key == keyboard.Key.down:
            Menuchoice += 1
            if Menuchoice == 4: Menuchoice = 0
        elif key == keyboard.Key.enter:
            Menuchoice = ["A", "B", "C", "D"][Menuchoice]
            return False
        else: return
        ScreenMenu()
        time.sleep(.3)
    displays = [f'{" "*35}Start Game', f'{" "*35}About The Game',f'{" "*35}How to Play the Game',f'{" "*35}Exit']
    Menuchoice = 0
    ScreenMenu()
    with keyboard.Listener(on_press=on_press) as listener: listener.join()
    return Menuchoice
def GameMode() -> str:
    '''
    GameMode()

    Manages the display and background process of choosing gamemodes. Returns the choice.
    - Return: str
    '''
    def ScreenMenu():
        '''
        ScreenMenu()

        Displays the gamemode menu.
        '''
        nonlocal gamemode
        ClearConsole()
        print('''
           ▄■♠■■■■■■■■■■■■■■■■■■■■■■■■■■■♥■■■■■♣■■■■■■■■■■■■■■■■■■■■■■■■■■■♦■▄
           █                        ~CHOOSE GAMEMODE~                        █
           █■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■█''')
        for i, j in enumerate(displays):
            if i == gamemode:
                if gamemode == 0: print(f'           █\033[1;32;40m♠{j}♠\033[0m█')
                elif gamemode == 1: print(f'           █\033[1;32;40m♥{j}♥\033[0m█')
                elif gamemode == 2: print(f'           █\033[1;32;40m♣{j}♣\033[0m█')
                elif gamemode == 3: print(f'           █\033[1;33;40m♦{j}♦\033[0m█')
            else: print(f'           █ {j} █')
        print('''           █▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█''')
        print('\n\n')
        print(' '*12+'╔═══════════════════════════════════════════════════════════╗')
        print(' '*12+'║Tips:                                                      ║')
        print(' '*12+'║ You can use up and down arrows to choose from the choices.║')
        print(' '*12+'║ Press Enter to confirm the highlighted choice.            ║')
        print(' '*12+'╚═══════════════════════════════════════════════════════════╝')
    def on_press(key):
        '''
        on_press(key)

        Reacts with the key listener and affects the ScreenMenu.
        '''
        nonlocal gamemode
        if key == keyboard.Key.up:
            gamemode -= 1
            if gamemode == -1: gamemode = 3
        elif key == keyboard.Key.down:
            gamemode += 1
            if gamemode == 4: gamemode = 0
        elif key == keyboard.Key.enter:
            gamemode = ["PVP", "leg", "dev", "cancel"][gamemode]
            return False
        else: return
        ScreenMenu()
        time.sleep(.3)
    displays = ['PVP'.center(63), 'CVP'.center(63),'Developer Mode'.center(63),'Cancel'.center(63)]
    gamemode = 0
    ScreenMenu()
    with keyboard.Listener(on_press=on_press) as listener: listener.join()  
    return gamemode 
def AboutGame()->None:
    '''
    AboutGame()->None
    Displays the abouts of this game.
    '''
    ClearConsole()
    print('''
           ▄■♠■■■■■■■■■■■■■■■■■■■■■■■■■■■♥■■■■■♣■■■■■■■■■■■■■■■■■■■■■■■■■■■♦■▄
           █                              ABOUT                              █
           █■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■█
           █ Mono² is a card pairing game that corporates human vs  computer █
           █ setup.  It allows users to apply tactics  and  strategies while █
           █ toying the cards on their deck. It is a text-based program that █
           █ uses linked list, written under Python language to be run using █
           █ console interface.                                              █
           █ Mono, which means "monkey" in Spanish is based on the card game █
           █ famously  known as  "Unggoy Unggoyan".  This  game will be full █
           █ packed  and  exciting  since  the  highlight will be You VS the █
           █ Computer.  We  shall  see  who  will be more competent and draw █
           █ cards faster and luckier.                                       █
           █▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█
                                ♠---------------------♥
                                  ~Press Esc to exit~
                                ♣---------------------♦''')
    def on_press(k):
        '''
        on_press(key)
        
        Called for every keypress.
        - Parameter:
            - key: contains the key pressed.
        '''
        if k == keyboard.Key.esc:
            return False
    with keyboard.Listener(on_press=on_press) as listener: listener.join()
    ClearConsole()
def How():
    ClearConsole()
    print('''
           ▄■♠■■■■■■■■■■■■■■■■■■■■■■■■■■■♥■■■■■♣■■■■■■■■■■■■■■■■■■■■■■■■■■■♦■▄
           █                           HOW TO PLAY                           █
           █■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■█
           █ 1. The three gamemodes.                                         █
           █    - PVP or Player vs Player. This gamemode let's you play with █
           █      your friends. By friends, I mean your only friend.         █
           █    - CVP or Computer vs Player. This  gamemode let's  you  play █
           █      with Mono. Maybe you don't have a friend at all.           █
           █    - CVP (Developer Mode). This  gamemode  let's  you  see  the █
           █      whole  process  of  this  game.  This is if you have trust █
           █      issues.                                                    █
           █ 2. The coin flip.                                               █
           █    - Determines who turn goes first.                            █
           █    - In PVP gamemode, Head outcomes means the game starts  with █
           █      Player 1 while Tails means  the game starts with Player 2. █
           █    - In CVP gamemodes, the user will  choose  between  heads or █
           █      tails.  If  they  guessed  correctly, then the game starts █
           █      with them while if not, then the game starts with Mono.    █
           █ 3. The game actual.                                             █
           █    - A secret card will be removed from the 52-card deck.  This █
           █      will be hidden throughout the game, unless Developer Mode. █
           █    - If it's your turn, choose among your opponent's cards.  If █
           █      it was a pair of one of your cards, then remove those pair █
           █      on  your deck. If it wasn't a pair, that card adds to your █
           █      pile.                                                      █
           █    - This process will repeat until there is one card left. The █
           █      holder  of  that  remaining  card  is the loser, while the █
           █      other is declared as the winner.                           █
           █    - The  secret  card  will then be shown as it is paired with █
           █      the last card.                                             █
           █ 4. Enjoy!                                                       █
           █▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█
                                ♠---------------------♥
                                  ~Press Esc to exit~
                                ♣---------------------♦''')
    def on_press(k):
        '''
        on_press(key)
        
        Called for every keypress.
        - Parameter:
            - key: contains the key pressed.
        '''
        if k == keyboard.Key.esc:
            return False
    with keyboard.Listener(on_press=on_press) as listener: listener.join()
    ClearConsole()

#Pre-Game
def GenerateCards(gamemode:str) -> linked_list:
    '''
    GenerateCards(gamemode)

    Generates a whole 52-card deck and stores it in a linked list using a linked_list object.
    - Parameter:
        - gamemode: determines whether to display the cards or not.
    - Return: linked_list
    '''
    deck = linked_list()
    for symbol in ['♠','♥','♣','♦']:
        for value in ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']:
            deck.append([value, symbol])
    if gamemode == 'dev':
        ClearConsole()
        print(' '*12+'╔══════════════════════════════════════════════════════╗')
        print(' '*12+f"║{f'There are {deck.length()} cards in total.'.center(54)}║")
        print(' '*12+'╚══════════════════════════════════════════════════════╝')
        print(getCardVisual(*[''.join(i) for i in deck.display()]))
        PressToNext(80)
    return deck
def RandomCard(gamemode:str, deck:linked_list) -> tuple:
    '''
    RandomCard(gamemode)

    Selects a random card to remove from the deck.
    - Parameter:
        - gamemode: determines whether or not to display the hidden card and the rest of the deck.
        - deck: linked list object containing the 52-card deck.
    - Return: tuple
    '''
    ind = random.randint(0, 52)
    hidden_card = deck.display()[ind]
    deck.erase(ind)
    if gamemode == 'dev':
        ClearConsole()
        print(' '*12+'╔══════════════════════════════════════════════════════╗')
        print(' '*12+f"║{f'~Hidden Card~'.center(54)}║")
        print(' '*12+'╚══════════════════════════════════════════════════════╝')
        print(getCardVisual(''.join(hidden_card)))
        print(' '*12+'╔══════════════════════════════════════════════════════╗')
        print(' '*12+f"║{f'~The Rest Of The Deck~'.center(54)}║")
        print(' '*12+'╚══════════════════════════════════════════════════════╝')
        print(getCardVisual(*[''.join(i) for i in deck.display()]))
        PressToNext(80)
    return hidden_card, deck
def RecheckAndShuffle(gamemode:str, deck:linked_list) -> linked_list:
    '''
    RecheckAndShuffle(gamemode)

    Checks for duplicates and removes it. Also shuffles the deck.
    - Parameter:
        - gamemode: determines whether or not to show the shuffled deck.
        - deck: linked list object containing the 52-card deck.
    - Return: linked_list
    '''
    shufUI = threading.Thread(target=shuffling)
    shufUI.start()
    check = deck.display()
    unique = []
    for i in check:
        if i != unique: unique.append(i)
        else: print(f'Duplicate {i} removed!') #for the hypothetical scenario that there are duplicates.
    deck = linked_list()
    for i in unique: deck.append(i)
    deck.shuffle()
    shufUI.join()
    if gamemode == 'dev':
        ClearConsole()
        print(' '*12+'╔══════════════════════════════════════════════════════╗')
        print(' '*12+f"║{'~Shuffled Cards~'.center(54)}║")
        print(' '*12+'╚══════════════════════════════════════════════════════╝')
        print(getCardVisual(*[''.join(i) for i in deck.display()]))
        PressToNext(80)
    return deck
def DistributeCards(gamemode:str, deck:linked_list) -> tuple:
    '''
    DistributeCards(gamemode)

    Distributes the cards randomly between player 1 and 2 and stores it in linked_list object.
    - Parameter:
        - gamemode: determines the kind of display shown and who gets the extra card.
        - deck: linked list object containing the 52-card deck.
    - Return: tuple
    '''
    distUI = threading.Thread(target=distribute, args=(gamemode,))
    distUI.start()
    player1_deck, player2_deck = linked_list(), linked_list()
    while deck.length() != 1:
        ind = random.randint(0,deck.length()-1)
        player2_deck.append(deck.display()[ind])
        deck.erase(ind)
        ind = random.randint(0,deck.length()-1)
        player1_deck.append(deck.display()[ind])
        deck.erase(ind)
    distUI.join()
    if gamemode == 'PVP':
        eval(f'player{random.choice(["1", "2"])}_deck.append(deck.display()[0])')
        deck.erase(0)
    else:
        player2_deck.append(deck.display()[0])
        deck.erase(0)
    
        if gamemode == 'dev':
            ClearConsole()
            print(' '*12+'╔══════════════════════════════════════════════════════╗')
            print(' '*12+"║{}║".format('~Mono\'s cards~'.center(54)))
            print(' '*12+'╚══════════════════════════════════════════════════════╝')
            print(getCardVisual(*[''.join(i) for i in player1_deck.display()]))
            print(' '*12+'╔══════════════════════════════════════════════════════╗')
            print(' '*12+f"║{'~Your cards~'.center(54)}║")
            print(' '*12+'╚══════════════════════════════════════════════════════╝')
            print(getCardVisual(*[''.join(i) for i in player2_deck.display()]))
            PressToNext(80)
    return player1_deck, player2_deck
def RemovePair(gamemode:str, player1_deck:linked_list, player2_deck:linked_list) -> tuple:
    '''
    RemovePair(gamemode:str, player1_deck:linked_list, player2_deck:linked_list)

    Removes pairs within each player's card piles.
    - Parameters:
        - gamemode: determines whether or not to display the processed data.
        - player1_deck: linked_list object to be processed.
        - player2_deck: linked_list object to be processed.
    - Return: tuple
    '''
    pairedP1 = []
    pairedP2 = []
    for p in range(1, 3):
        values = []
        signs = []
        for i in eval(f'player{p}_deck.display()'):
            if i[0] in values:
                ind = values.index(i[0])
                eval(f'pairedP{p}.append("{values.pop(ind)}{signs.pop(ind)}")')
                eval(f"player{p}_deck.erase(player{p}_deck.display().index([pairedP{p}[-1][:-1], pairedP{p}[-1][-1]]))")
                eval(f'pairedP{p}.append("{i[0]}{i[1]}")')
                eval(f"player{p}_deck.erase(player{p}_deck.display().index(i))")
            else:
                values.append(i[0])
                signs.append(i[1])
    if gamemode == 'dev':
        ClearConsole()
        for i, player in enumerate(["Mono's", "Your"]):
            print(' '*12+'╔══════════════════════════════════════════════════════╗')
            print(' '*12+f"║{f'~{player} Paired Cards~'.center(54)}║")
            print(' '*12+'╚══════════════════════════════════════════════════════╝')
            print(getCardVisual(*eval(f"pairedP{i+1}")))
            print(' '*12+'╔══════════════════════════════════════════════════════╗')
            print(' '*12+f"║{f'~{player} Remaining Cards~'.center(54)}║")
            print(' '*12+'╚══════════════════════════════════════════════════════╝')
            print(getCardVisual(*[''.join(i) for i in eval(f"player{i+1}_deck.display()")]))
        PressToNext(80)
    return player1_deck, player2_deck
#GAME PROPER
def GameProper(gamemode:str, player1_deck:linked_list, player2_deck:linked_list):
    '''
    GameProper(gamemode:str, player1_deck:linked_list, player2_deck:linked_list)

    Manages the whole game proper process.
    - Parameter:
    '''
    #Utilities
    def Start(mode:str) -> str:
        '''
        Start(mode)

        Decides 1st turn depending on user's choice between "Heads" or "Tails".
        - Parameter:
            - mode: determines what type of coin toss will happen.
        - Return: String
        '''
        if mode != 'PVP':
            def on_press(key):
                '''
                on_press(key)
                
                Called for every keypress.
                - Parameter:
                    - key: contains the key pressed.
                '''
                nonlocal coin_prediction
                if key in [keyboard.Key.left, keyboard.Key.right]:
                    coin_prediction = "Heads" if coin_prediction == "Tails" else "Tails"
                elif key == keyboard.Key.enter: return False
                else: return
                coinFlipping('c', coin_prediction)
                print('\n\n')
                print(' '*12+'╔═══════════════════════════════════════════════════════════╗')
                print(' '*12+'║Tips:                                                      ║')
                print(' '*12+'║ Click Enter to choose the shown coin.                     ║')
                print(' '*12+'║ Press ← → keys to choose among the choices.               ║')
                print(' '*12+'╚═══════════════════════════════════════════════════════════╝')
            coin_prediction = "Heads"
            coinFlipping('c', coin_prediction)
            print('\n\n')
            print(' '*12+'╔═══════════════════════════════════════════════════════════╗')
            print(' '*12+'║Tips:                                                      ║')
            print(' '*12+'║ Click Enter to choose the shown coin.                     ║')
            print(' '*12+'║ Press ← → keys to choose among the choices.               ║')
            print(' '*12+'╚═══════════════════════════════════════════════════════════╝')
            with keyboard.Listener(on_press=on_press) as listener:
                listener.join()
                kb.release(Key.space)
            tossed_coin = random.choice(["Heads", "Tails"])
            coinFlipping('r', tossed_coin, coin_prediction)
            PressToNext(104)
            if tossed_coin == coin_prediction: return "Player2"
            else: return "Player1"
        else:
            tossed_coin = random.choice(["Heads", "Tails"])
            coinFlipping('pvp', tossed_coin)
            PressToNext(104)
            if tossed_coin == 'Heads': return "Player1"
            else: return "Player2"
    def NextTurn(current:str) -> str:
        '''
        Next Turn (current)

        Evaluates the next turn.
        - Paramenter:
            - current:str: current player.
        - Return: String
        '''
        return "Player1" if current == 'Player2' else "Player2"
    def Midturn(turn:str):
        '''
        Midturn(turn:str)

        Displays who's turn it is.
        - Parameter:
            - turn: who's turn is it?
        '''
        print('''
	     \033[1;30;40m▄▄             ▄█▀▄\033[1;37;40m     \033[1;33;40m▄█▄\033[1;37;40m     \033[1;31;40m▄▄ ▄▄\033[1;37;40m     \033[1;32;40m▄▄▄\033[1;37;40m      \033[1;36;40m▄▄\033[1;37;40m      \033[1;30;40m▄▀█▄             ▄▄\033[1;37;40m
	       \033[1;30;40m▀▄       ▄▄▄▄█████\033[1;37;40m  \033[1;33;40m▄█████▄\033[1;37;40m  \033[1;31;40m▀█████▀\033[1;37;40m  \033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m  \033[1;36;40m▄████▄\033[1;37;40m   \033[1;30;40m█████▄▄▄▄       ▄▀\033[1;37;40m
	        \033[1;30;40m▀▄   ▄████▀▀██▀\033[1;37;40m     \033[1;33;40m▀▀▄▀▀\033[1;37;40m     \033[1;31;40m▀█▀\033[1;37;40m    \033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m   \033[1;36;40m▀██▀\033[1;37;40m      \033[1;30;40m▀██▀▀████▄   ▄▀\033[1;37;40m
	         \033[1;30;40m█▄ ▄████▄██▄▀█▄\033[1;37;40m                                        \033[1;30;40m▄█▀▄██▄████▄ ▄█\033[1;37;40m
	          \033[1;30;40m▀██▀████▀ █▄▄▀█▄▄\033[1;37;40m                                  \033[1;30;40m▄▄█▀▄▄█ ▀████▀██▀\033[1;37;40m''')
        if turn == 'mo':
            print(f'''	     ▄████████████████████████████████████████████████████████████████████████████▄
	     ███                                                                        ███
	     ███      \033[1;33;40m██████   ██████  ████████████  █████████████  ████████████\033[1;37;40m        ███
	     ███      \033[1;33;40m███   ███   ███  ███      ███  ███       ███  ███      ███\033[1;37;40m        ███
	     ███      \033[1;33;40m███   ███   ███  ███      ███  ███       ███  ███      ███\033[1;37;40m        ███
	     ███      \033[1;33;40m███   ███   ███  ███      ███  ███       ███  ███      ███\033[1;37;40m        ███
	     ███      \033[1;33;40m███         ███  ████████████  ███       ███  ████████████\033[1;37;40m        ███
	     ███{"Mono's turn!".center(72)}███
	     ▀████████████████████████████████████████████████████████████████████████████▀ ''')
        elif turn == 'us':
            print(f'''	     ▄████████████████████████████████████████████████████████████████████████████▄
            ███                                                                         ███
            ███   \033[1;31;40m              ███  ███   ███████   ███████   ███████               \033[1;37;40m   ███
            ███   \033[1;31;40m              ███  ███  ███        ███       ███   ██              \033[1;37;40m   ███
            ███   \033[1;31;40m              ███  ███   ███████   ███████   ███████               \033[1;37;40m   ███
            ███   \033[1;31;40m              ███  ███        ███  ███       ███  ███              \033[1;37;40m   ███
            ███   \033[1;31;40m               ██████    ███████   ███████   ███   ██              \033[1;37;40m   ███
            ███{"User's turn!".center(73)}███
            ▀████████████████████████████████████████████████████████████████████████████▀ ''')
        elif turn == 'p1':
            print(f'''	     ▄████████████████████████████████████████████████████████████████████████████▄
            ███                                                                         ███
            ███   \033[1;32;40m               ████████████          ████                          \033[1;37;40m   ███
            ███   \033[1;32;40m               ███         ███     ██ ███                          \033[1;37;40m   ███
            ███   \033[1;32;40m               ███         ███   ██   ███                          \033[1;37;40m   ███
            ███   \033[1;32;40m               ████████████           ███                          \033[1;37;40m   ███
            ███   \033[1;32;40m               ███               ███████████                       \033[1;37;40m   ███
            ███{"Player 1's turn!".center(73)}███
            ▀████████████████████████████████████████████████████████████████████████████▀ ''')
        elif turn == 'p2':
            print(f'''	     ▄████████████████████████████████████████████████████████████████████████████▄
            ███                                                                         ███
            ███   \033[1;36;40m               ████████████        ██████                 \033[1;37;40m            ███
            ███   \033[1;36;40m               ███         ███   ██     ███               \033[1;37;40m            ███
            ███   \033[1;36;40m               ███         ███        ███                 \033[1;37;40m            ███
            ███   \033[1;36;40m               ████████████        ███                    \033[1;37;40m            ███
            ███   \033[1;36;40m               ███               ███████████              \033[1;37;40m            ███
            ███{"Player 2's turn!".center(73)}███
            ▀████████████████████████████████████████████████████████████████████████████▀ ''')
    def Winner(winner:str):
        '''
        Winner(winner:str)

        Declares the winner through display.
        - Parameter:
            - winner: who's the winner?
        '''
        print('''
	     \033[1;30;40m▄▄             ▄█▀▄\033[1;37;40m     \033[1;33;40m▄█▄\033[1;37;40m     \033[1;31;40m▄▄ ▄▄\033[1;37;40m     \033[1;32;40m▄▄▄\033[1;37;40m      \033[1;36;40m▄▄\033[1;37;40m      \033[1;30;40m▄▀█▄             ▄▄\033[1;37;40m
	       \033[1;30;40m▀▄       ▄▄▄▄█████\033[1;37;40m  \033[1;33;40m▄█████▄\033[1;37;40m  \033[1;31;40m▀█████▀\033[1;37;40m  \033[1;32;40m▄▄▀█▀▄▄\033[1;37;40m  \033[1;36;40m▄████▄\033[1;37;40m   \033[1;30;40m█████▄▄▄▄       ▄▀\033[1;37;40m
	        \033[1;30;40m▀▄   ▄████▀▀██▀\033[1;37;40m     \033[1;33;40m▀▀▄▀▀\033[1;37;40m     \033[1;31;40m▀█▀\033[1;37;40m    \033[1;32;40m▀▀▀▄▀▀▀\033[1;37;40m   \033[1;36;40m▀██▀\033[1;37;40m      \033[1;30;40m▀██▀▀████▄   ▄▀\033[1;37;40m
	         \033[1;30;40m█▄ ▄████▄██▄▀█▄\033[1;37;40m                                        \033[1;30;40m▄█▀▄██▄████▄ ▄█\033[1;37;40m
	          \033[1;30;40m▀██▀████▀ █▄▄▀█▄▄\033[1;37;40m                                  \033[1;30;40m▄▄█▀▄▄█ ▀████▀██▀\033[1;37;40m''')
        if winner == 'mo':
            print(f'''	     ▄████████████████████████████████████████████████████████████████████████████▄
	     ███                                                                        ███
	     ███      \033[1;33;40m██████   ██████  ████████████  █████████████  ████████████\033[1;37;40m        ███
	     ███      \033[1;33;40m███   ███   ███  ███      ███  ███       ███  ███      ███\033[1;37;40m        ███
	     ███      \033[1;33;40m███   ███   ███  ███      ███  ███       ███  ███      ███\033[1;37;40m        ███
	     ███      \033[1;33;40m███   ███   ███  ███      ███  ███       ███  ███      ███\033[1;37;40m        ███
	     ███      \033[1;33;40m███         ███  ████████████  ███       ███  ████████████\033[1;37;40m        ███
	     ███{"Mono Wins!!!".center(72)}███
	     ▀████████████████████████████████████████████████████████████████████████████▀ ''')
        elif winner == 'us':
            print(f'''	     ▄████████████████████████████████████████████████████████████████████████████▄
            ███                                                                         ███
            ███   \033[1;31;40m              ███  ███   ███████   ███████   ███████               \033[1;37;40m   ███
            ███   \033[1;31;40m              ███  ███  ███        ███       ███   ██              \033[1;37;40m   ███
            ███   \033[1;31;40m              ███  ███   ███████   ███████   ███████               \033[1;37;40m   ███
            ███   \033[1;31;40m              ███  ███        ███  ███       ███  ███              \033[1;37;40m   ███
            ███   \033[1;31;40m               ██████    ███████   ███████   ███   ██              \033[1;37;40m   ███
            ███{"User Wins!!!".center(73)}███
            ▀████████████████████████████████████████████████████████████████████████████▀ ''')
        elif winner == 'p1':
            print(f'''	     ▄████████████████████████████████████████████████████████████████████████████▄
            ███                                                                         ███
            ███   \033[1;32;40m               ████████████          ████                          \033[1;37;40m   ███
            ███   \033[1;32;40m               ███         ███     ██ ███                          \033[1;37;40m   ███
            ███   \033[1;32;40m               ███         ███   ██   ███                          \033[1;37;40m   ███
            ███   \033[1;32;40m               ████████████           ███                          \033[1;37;40m   ███
            ███   \033[1;32;40m               ███               ███████████                       \033[1;37;40m   ███
            ███{"Player 1 Wins!!!".center(73)}███
            ▀████████████████████████████████████████████████████████████████████████████▀ ''')
        elif winner == 'p2':
            print(f'''	     ▄████████████████████████████████████████████████████████████████████████████▄
            ███                                                                         ███
            ███   \033[1;36;40m               ████████████        ██████                 \033[1;37;40m            ███
            ███   \033[1;36;40m               ███         ███   ██     ███               \033[1;37;40m            ███
            ███   \033[1;36;40m               ███         ███        ███                 \033[1;37;40m            ███
            ███   \033[1;36;40m               ████████████        ███                    \033[1;37;40m            ███
            ███   \033[1;36;40m               ███               ███████████              \033[1;37;40m            ███
            ███{"Player 2 Wins!!!".center(73)}███
            ▀████████████████████████████████████████████████████████████████████████████▀ ''')
    def LastCardDisplay(winner:str, last_card: list, hidden_card:list):
        '''
        LastCardDisplay(winner:str, hidden_card:list)

        Displays the last card and the winner declaration.
        - Parameters:
            - winner: declared winner.
            - last_card: the last card.
            - hidden_card: the hidden card.
        '''
        ClearConsole()
        Winner(winner)
        print('╔══════════════════════════════════════════════════════╗'.center(103))
        print(f"║{f'Last Pair:'.center(54)}║".center(103))
        print('╚══════════════════════════════════════════════════════╝'.center(103))
        FinalCards(''.join(last_card), ''.join(hidden_card))
    #CvP
    def Mono(mode:str, player1_deck:linked_list, player2_deck:linked_list) -> tuple:
        '''
        Mono(mode:str, player1_deck:linked_list, player2_deck:linked_list)

        Simulates the process Mono needs to take.
        - Parameter:
            - mode:
                - dev: developer mode; every action is displayed.
                - leg: legit mode; Mono's deck is hidden.
            - player1_deck, player2_deck: cards to be processed.
        - Return: tuple
        '''
        ind = random.randint(0, player2_deck.length()-1)
        choice = player2_deck.display()[ind]
        player2_deck.erase(ind)
        #display
        ClearConsole()
        print('Mono')
        if mode == 'dev': print(getCardVisual(*[''.join(i) for i in player1_deck.display()]))
        else: print(getCardVisual(*['???' for _ in range(player1_deck.length())]))
        print('Choice')
        print(getCardVisual(''.join(choice)))
        print('User')
        userdeck = player2_deck.display()
        userdeck.insert(0, ['', 'u'])
        print(getCardVisual(*[''.join(i) for i in userdeck]))
        time.sleep(1)
        try:
            values = [i[0] for i in player1_deck.display()]
            compare = values.index(choice[0])
            removed = player1_deck.display()[compare]
            player1_deck.erase(compare)
            #display
            ClearConsole()
            print('Mono')
            Monodeck = player1_deck.display()
            Monodeck.insert(1, ['','d'])
            if mode == 'dev': print(getCardVisual(*[''.join(i) for i in Monodeck]))
            else: print(getCardVisual(*[''.join(i) if i==['','d'] else '???' for i in Monodeck]))
            print('Found Pair:')
            print(getCardVisual(''.join(choice), ''.join(removed)))
            print('User')
            print(getCardVisual(*[''.join(i) for i in userdeck]))
        except:
            player1_deck.append(choice)
            #display
            ClearConsole()
            print('Mono')
            if mode == 'dev': print(getCardVisual(*[''.join(i) for i in player1_deck.display()]))
            else: print(getCardVisual(*['???' for _ in range(player1_deck.length())]))
            print(getCardVisual(['', 'n']))
            print('User')
            print(getCardVisual(*[''.join(i) for i in userdeck]))
        if mode == 'leg': player1_deck.shuffle()
        PressToNext(80)
        return player1_deck, player2_deck
    def User(mode:str, player1_deck:linked_list, player2_deck:linked_list) -> tuple:
        '''
        User(mode:str, player_1deck:linked_list, player2_deck:linked_list)

        Processes user's turn.
        - Parameter:
            - mode:
                - dev: developer mode; every action is displayed.
                - leg: legit mode; Mono's deck is hidden.
            - player1_deck, player2_deck: cards to be processed.
        - Return: tuple
        '''
        def ChoiceDisplay():
            ClearConsole()
            print('Choose:')
            Monodeck = player1_deck.display()
            if mode == 'dev': print(getCardChoiceVisual(choiceind, *[''.join(i) for i in Monodeck]))
            else: print(getCardChoiceVisual(choiceind, *['???' for _ in range(len(Monodeck))]))
            print('\nYour Deck:')
            print(getCardVisual(*[''.join(i) for i in player2_deck.display()]))
            print('\n\n')
            print(' '*12+'╔═══════════════════════════════════════════════════════════╗')
            print(' '*12+'║Tips:                                                      ║')
            print(' '*12+'║ Press Enter to choose highlighted card.                   ║')
            print(' '*12+'║ Press ← → keys to choose among the choices.               ║')
            print(' '*12+'╚═══════════════════════════════════════════════════════════╝')
        def on_press(key):
            '''
            on_press(key)
            
            Called for every keypress.
            - Parameter:
                - key: contains the key pressed.
            '''
            nonlocal choiceind, Monodeck
            if key == keyboard.Key.left:
                choiceind -= 1
                if choiceind < 0: choiceind = player1_deck.length() - 1
            elif key == keyboard.Key.right:
                choiceind += 1
                if choiceind > player1_deck.length() - 1: choiceind = 0
            elif key == keyboard.Key.enter: return False
            else: return
            ChoiceDisplay()
        Monodeck = [''.join(i) for i in player1_deck.display()]
        choiceind = 0
        ChoiceDisplay()
        with keyboard.Listener(on_press=on_press) as listener: listener.join()
        choice = Monodeck[choiceind]
        player1_deck.erase(choiceind)
        
        #display
        ClearConsole()
        print('Mono')
        Monodeck = player1_deck.display()
        Monodeck.insert(0, ['', 'd'])
        if mode == 'dev': print(getCardVisual(*[''.join(i) for i in Monodeck]))
        else: print(getCardVisual(*[' d' if i == choiceind else '???' for i in range(len(Monodeck))]))
        print('Choice')
        print(getCardVisual(choice))
        print('User')
        print(getCardVisual(*[''.join(i) for i in player2_deck.display()]))
        time.sleep(1)
        try:
            values = [i[0] for i in player2_deck.display()]
            compare = values.index(choice[:-1])
            removed = player2_deck.display()[compare]
            player2_deck.erase(compare)
            #display
            ClearConsole()
            print('Mono')
            if mode == 'dev': print(getCardVisual(*[''.join(i) for i in Monodeck]))
            else: print(getCardVisual(*[' d' if i == choiceind else '???' for i in range(len(Monodeck))]))
            print('Found Pair:')
            print(getCardVisual(''.join(choice), ''.join(removed)))
            print('User')
            userdeck = player2_deck.display()
            userdeck.insert(1, ['','u'])
            print(getCardVisual(*[''.join(i) for i in userdeck]))
        except:
            player2_deck.append(choice)
            #display
            ClearConsole()
            print('Mono')
            if mode == 'dev': print(getCardVisual(*[''.join(i) for i in player1_deck.display()]))
            else: print(getCardVisual(*['???' for _ in range(player1_deck.length())]))
            print(getCardVisual(['', 'n']))
            print('User')
            print(getCardVisual(*[''.join(i) for i in player2_deck.display()]))
        if mode == 'leg': player1_deck.shuffle()
        PressToNext(80)
        return player1_deck, player2_deck
    #PvP
    def UserP1(player1_deck:linked_list, player2_deck:linked_list) -> tuple:
        '''
        UserP1(player1_deck:linked_list, player2_deck:linked_list)

        Processes player 1's turn.
        - Parameter:
            - player1_deck, player2_deck: cards to be processed.
        - Return: tuple
        '''
        def ChoiceDisplay():
            ClearConsole()
            print('Choose:')
            Player2deck = player2_deck.display()
            print(getCardChoiceVisual(choiceind, *['???' for _ in range(len(Player2deck))]))
            print('\nYour Deck:')
            print(getCardVisual(*[''.join(i) for i in player1_deck.display()]))
            print('\n\n')
            print(' '*12+'╔═══════════════════════════════════════════════════════════╗')
            print(' '*12+'║Tips:                                                      ║')
            print(' '*12+'║ Press Enter to choose highlighted card.                   ║')
            print(' '*12+'║ Press ← → keys to choose among the choices.               ║')
            print(' '*12+'║ Press "s" key to shuffle your deck.                       ║')
            print(' '*12+'╚═══════════════════════════════════════════════════════════╝')
        def on_press(key):
            '''
            on_press(key)
            
            Called for every keypress.
            - Parameter:
                - key: contains the key pressed.
            '''
            nonlocal choiceind
            if key == keyboard.Key.left:
                choiceind -= 1
                if choiceind < 0: choiceind = player2_deck.length() - 1
            elif key == keyboard.Key.right:
                choiceind += 1
                if choiceind > player2_deck.length() - 1: choiceind = 0
            elif key == keyboard.Key.enter: return False
            else:
                try:
                    if key.char == 's': player1_deck.shuffle()
                    else: return
                except: return
            ChoiceDisplay()
        Player2deck = [''.join(i) for i in player2_deck.display()]
        choiceind = 0
        ChoiceDisplay()
        with keyboard.Listener(on_press=on_press) as listener: listener.join()
        choice = Player2deck[choiceind]
        player2_deck.erase(choiceind)
        
        #display
        ClearConsole()
        print('Player 2')
        Player2deck = player2_deck.display()
        Player2deck.insert(0, ['', 'd'])
        print(getCardVisual(*[' d' if i == choiceind else '???' for i in range(len(Player2deck))]))
        print('Choice')
        print(getCardVisual(choice))
        print('Player 1')
        print(getCardVisual(*[''.join(i) for i in player1_deck.display()]))
        time.sleep(1)
        try:
            values = [i[0] for i in player1_deck.display()]
            compare = values.index(choice[:-1])
            removed = player1_deck.display()[compare]
            player1_deck.erase(compare)
            #display
            ClearConsole()
            print('Player 2')
            print(getCardVisual(*[' d' if i == choiceind else '???' for i in range(len(Player2deck))]))
            print('Found Pair:')
            print(getCardVisual(''.join(choice), ''.join(removed)))
            print('Player 1')
            userdeck = player1_deck.display()
            userdeck.insert(1, ['','u'])
            print(getCardVisual(*[''.join(i) for i in userdeck]))
        except:
            player1_deck.append(choice)
            #display
            ClearConsole()
            print('Player 2')
            print(getCardVisual(*['???' for _ in range(player2_deck.length())]))
            print(getCardVisual(['', 'n']))
            print('Player 1')
            print(getCardVisual(*[''.join(i) for i in player1_deck.display()]))
        PressToNext(80)
        return player1_deck, player2_deck
    def UserP2(player1_deck:linked_list, player2_deck:linked_list) -> tuple:
        '''
        UserP1(player1_deck:linked_list, player2_deck:linked_list)

        Processes player 1's turn.
        - Parameter:
            - player1_deck, player2_deck: cards to be processed.
        - Return: tuple
        '''
        def ChoiceDisplay():
            ClearConsole()
            print('Choose:')
            Player1deck = player1_deck.display()
            print(getCardChoiceVisual(choiceind, *['???' for _ in range(len(Player1deck))]))
            print('\nYour Deck:')
            print(getCardVisual(*[''.join(i) for i in player2_deck.display()]))
            print('\n\n')
            print(' '*12+'╔═══════════════════════════════════════════════════════════╗')
            print(' '*12+'║Tips:                                                      ║')
            print(' '*12+'║ Press Enter to choose highlighted card.                   ║')
            print(' '*12+'║ Press ← → keys to choose among the choices.               ║')
            print(' '*12+'║ Press "s" key to shuffle your deck.                       ║')
            print(' '*12+'╚═══════════════════════════════════════════════════════════╝')
        def on_press(key):
            '''
            on_press(key)
            
            Called for every keypress.
            - Parameter:
                - key: contains the key pressed.
            '''
            nonlocal choiceind
            if key == keyboard.Key.left:
                choiceind -= 1
                if choiceind < 0: choiceind = player1_deck.length() - 1
            elif key == keyboard.Key.right:
                choiceind += 1
                if choiceind > player1_deck.length() - 1: choiceind = 0
            elif key == keyboard.Key.enter: return False
            else:
                try:
                    if key.char == 's': player2_deck.shuffle()
                    else: return
                except: return
            ChoiceDisplay()
        Player1deck = [''.join(i) for i in player1_deck.display()]
        choiceind = 0
        ChoiceDisplay()
        with keyboard.Listener(on_press=on_press) as listener: listener.join()
        choice = Player1deck[choiceind]
        player1_deck.erase(choiceind)
        
        #display
        ClearConsole()
        print('Player 1')
        Player1deck = player1_deck.display()
        Player1deck.insert(0, ['', 'd'])
        print(getCardVisual(*[' d' if i == choiceind else '???' for i in range(len(Player1deck))]))
        print('Choice')
        print(getCardVisual(choice))
        print('Player 2')
        print(getCardVisual(*[''.join(i) for i in player2_deck.display()]))
        time.sleep(1)
        try:
            values = [i[0] for i in player2_deck.display()]
            compare = values.index(choice[:-1])
            removed = player2_deck.display()[compare]
            player2_deck.erase(compare)
            #display
            ClearConsole()
            print('Player 1')
            print(getCardVisual(*[' d' if i == choiceind else '???' for i in range(len(Player1deck))]))
            print('Found Pair:')
            print(getCardVisual(''.join(choice), ''.join(removed)))
            print('Player 2')
            userdeck = player2_deck.display()
            userdeck.insert(1, ['','u'])
            print(getCardVisual(*[''.join(i) for i in userdeck]))
        except:
            player2_deck.append(choice)
            #display
            ClearConsole()
            print('Player 1')
            print(getCardVisual(*['???' for _ in range(player1_deck.length())]))
            print(getCardVisual(['', 'n']))
            print('Player 2')
            print(getCardVisual(*[''.join(i) for i in player2_deck.display()]))
        PressToNext(80)
        return player1_deck, player2_deck
    current = Start(gamemode)
    if gamemode == 'PVP':
        cards_on_table = player2_deck.length() + player1_deck.length()
        while cards_on_table != 1:
            if current == "Player1":
                ClearConsole()
                Midturn('p1')
                PressToNext(103)
                player1_deck, player2_deck = UserP1(player1_deck, player2_deck)
            else:
                ClearConsole()
                Midturn('p2')
                PressToNext(103)
                player1_deck, player2_deck = UserP2(player1_deck, player2_deck)
            current = NextTurn(current)
            cards_on_table = player2_deck.length() + player1_deck.length()
        if player1_deck.length(): LastCardDisplay('p2', player1_deck.display()[0], hidden_card)
        else: LastCardDisplay('p1', player2_deck.display()[0], hidden_card)
    else:
        #player1: Mono
        #Player2: User
        cards_on_table = player2_deck.length() + player1_deck.length()
        while cards_on_table != 1:
            if current == "Player2":
                ClearConsole()
                Midturn('us')
                PressToNext(103)
                player1_deck, player2_deck = User(gamemode, player1_deck, player2_deck)
            else:
                ClearConsole()
                Midturn('mo')
                PressToNext(103)
                player1_deck, player2_deck = Mono(gamemode, player1_deck, player2_deck)
            current = NextTurn(current)
            cards_on_table = player2_deck.length() + player1_deck.length()
        if player2_deck.length(): LastCardDisplay('mo', player2_deck.display()[0], hidden_card)
        else: LastCardDisplay('us', player1_deck.display()[0], hidden_card)
    time.sleep(1)
    PressToNext(103)

#Setup Window
kb = conkb()
kb.tap(keyboard.Key.f11)
ClearConsole()

while True:
    #Main Menu Caller
    gamemode = MainMenuManager()

    #Pre-Game Caller
    deck = GenerateCards(gamemode)
    hidden_card, deck = RandomCard(gamemode, deck)
    deck = RecheckAndShuffle(gamemode, deck)
    player1_deck, player2_deck = DistributeCards(gamemode, deck)
    player1_deck, player2_deck = RemovePair(gamemode, player1_deck, player2_deck)
    
    #Game Proper Caller
    GameProper(gamemode, player1_deck, player2_deck)